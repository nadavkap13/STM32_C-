
C_introduction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005840  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c58  08005c58  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005c58  08005c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c60  08005c60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c68  08005c68  00015c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000074  08005ce0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08005ce0  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015476  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317c  00000000  00000000  0003551a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00038698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00039760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc8d  00000000  00000000  0003a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015098  00000000  00000000  0006638d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8397  00000000  00000000  0007b425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001737bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051c8  00000000  00000000  0017380c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059b8 	.word	0x080059b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080059b8 	.word	0x080059b8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <_ZN6BUTTONC1EP12GPIO_TypeDeft>:
#include <stdio.h>
#include "mymain.h"
#include "main.h"
#include "BUTTON.h"

BUTTON::BUTTON(GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin):
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	4613      	mov	r3, r2
 80005b0:	80fb      	strh	r3, [r7, #6]
				GPIOx(GPIOx),GPIO_Pin(GPIO_Pin)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	88fa      	ldrh	r2, [r7, #6]
 80005bc:	809a      	strh	r2, [r3, #4]
{
}
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	4618      	mov	r0, r3
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <_ZN3CliD1Ev>:

class Cli{
public:
	virtual void doCommand(const char * param) = 0;

	virtual ~Cli(){}
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <_ZN3CliD1Ev+0x1c>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	08005a7c 	.word	0x08005a7c

080005ec <_ZN3CliD0Ev>:
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ffe9 	bl	80005cc <_ZN3CliD1Ev>
 80005fa:	2104      	movs	r1, #4
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f003 ff0c 	bl	800441a <_ZdlPvj>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <_ZN3CliC1Ev>:
class Cli{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <_ZN3CliC1Ev+0x1c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	08005a7c 	.word	0x08005a7c

0800062c <_ZN5ledOnC1EP3LED>:
extern int blinkOn;
class ledOn : public Cli{
private:
	LED * _led;
public:
	ledOn(LED * led){
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffe7 	bl	800060c <_ZN3CliC1Ev>
 800063e:	4a05      	ldr	r2, [pc, #20]	; (8000654 <_ZN5ledOnC1EP3LED+0x28>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	601a      	str	r2, [r3, #0]
		_led = led;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	605a      	str	r2, [r3, #4]
	}
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08005a68 	.word	0x08005a68

08000658 <_ZN5ledOn9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
		blinkOn = 0;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <_ZN5ledOn9doCommandEPKc+0x24>)
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
		_led->Led_On();
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f975 	bl	800095c <_ZN3LED6Led_OnEv>
	}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000368 	.word	0x20000368

08000680 <_ZN6ledOffC1EP3LED>:
};
class ledOff : public Cli{
private:
	LED * _led;
public:
	ledOff(LED * led){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffbd 	bl	800060c <_ZN3CliC1Ev>
 8000692:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <_ZN6ledOffC1EP3LED+0x28>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	601a      	str	r2, [r3, #0]
		_led = led;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	605a      	str	r2, [r3, #4]
	}
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	08005a54 	.word	0x08005a54

080006ac <_ZN6ledOff9doCommandEPKc>:
	void doCommand(const char * param) override{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
		blinkOn = 0;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <_ZN6ledOff9doCommandEPKc+0x24>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
		_led->Led_Off();
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 f95b 	bl	800097c <_ZN3LED7Led_OffEv>
	}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000368 	.word	0x20000368

080006d4 <_ZN8ledBlinkC1EP3LED>:
};
class ledBlink : public Cli{
private:
	LED * _led;
public:
	ledBlink(LED * led){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff93 	bl	800060c <_ZN3CliC1Ev>
 80006e6:	4a05      	ldr	r2, [pc, #20]	; (80006fc <_ZN8ledBlinkC1EP3LED+0x28>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	601a      	str	r2, [r3, #0]
		_led = led;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	605a      	str	r2, [r3, #4]
	}
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	08005a40 	.word	0x08005a40

08000700 <_ZN8ledBlink9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
		blinkOn = 1;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <_ZN8ledBlink9doCommandEPKc+0x24>)
 800070c:	2201      	movs	r2, #1
 800070e:	601a      	str	r2, [r3, #0]
		_led->Led_Blink();
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f94f 	bl	80009b8 <_ZN3LED9Led_BlinkEv>
	}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000368 	.word	0x20000368

08000728 <_ZN11ledSetDelayC1EP3LED>:
};
class ledSetDelay : public Cli{
private:
	LED * _led;
public:
	ledSetDelay(LED * led){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff69 	bl	800060c <_ZN3CliC1Ev>
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <_ZN11ledSetDelayC1EP3LED+0x28>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	601a      	str	r2, [r3, #0]
		_led = led;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	605a      	str	r2, [r3, #4]
	}
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	08005a2c 	.word	0x08005a2c

08000754 <_ZN11ledSetDelay9doCommandEPKc>:
	void doCommand(const char * param) override{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
		blinkOn = 0;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <_ZN11ledSetDelay9doCommandEPKc+0x2c>)
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
		int _param = atoi(param);
 8000764:	6838      	ldr	r0, [r7, #0]
 8000766:	f003 fe92 	bl	800448e <atoi>
 800076a:	60f8      	str	r0, [r7, #12]
		_led->LED_delay(_param);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	68f9      	ldr	r1, [r7, #12]
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f912 	bl	800099c <_ZN3LED9LED_delayEi>
	}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000368 	.word	0x20000368

08000784 <_Z7initCLIv>:
};

void initCLI(){
 8000784:	b598      	push	{r3, r4, r7, lr}
 8000786:	af00      	add	r7, sp, #0
	RegisterCommand("ledon",new ledOn(&ledblue));
 8000788:	2008      	movs	r0, #8
 800078a:	f003 fe48 	bl	800441e <_Znwj>
 800078e:	4603      	mov	r3, r0
 8000790:	461c      	mov	r4, r3
 8000792:	4918      	ldr	r1, [pc, #96]	; (80007f4 <_Z7initCLIv+0x70>)
 8000794:	4620      	mov	r0, r4
 8000796:	f7ff ff49 	bl	800062c <_ZN5ledOnC1EP3LED>
 800079a:	4621      	mov	r1, r4
 800079c:	4816      	ldr	r0, [pc, #88]	; (80007f8 <_Z7initCLIv+0x74>)
 800079e:	f000 f929 	bl	80009f4 <_Z15RegisterCommandPcP3Cli>
	RegisterCommand("ledoff",new ledOff(&ledblue));
 80007a2:	2008      	movs	r0, #8
 80007a4:	f003 fe3b 	bl	800441e <_Znwj>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461c      	mov	r4, r3
 80007ac:	4911      	ldr	r1, [pc, #68]	; (80007f4 <_Z7initCLIv+0x70>)
 80007ae:	4620      	mov	r0, r4
 80007b0:	f7ff ff66 	bl	8000680 <_ZN6ledOffC1EP3LED>
 80007b4:	4621      	mov	r1, r4
 80007b6:	4811      	ldr	r0, [pc, #68]	; (80007fc <_Z7initCLIv+0x78>)
 80007b8:	f000 f91c 	bl	80009f4 <_Z15RegisterCommandPcP3Cli>
	RegisterCommand("ledblink",new ledBlink(&ledblue));
 80007bc:	2008      	movs	r0, #8
 80007be:	f003 fe2e 	bl	800441e <_Znwj>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461c      	mov	r4, r3
 80007c6:	490b      	ldr	r1, [pc, #44]	; (80007f4 <_Z7initCLIv+0x70>)
 80007c8:	4620      	mov	r0, r4
 80007ca:	f7ff ff83 	bl	80006d4 <_ZN8ledBlinkC1EP3LED>
 80007ce:	4621      	mov	r1, r4
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <_Z7initCLIv+0x7c>)
 80007d2:	f000 f90f 	bl	80009f4 <_Z15RegisterCommandPcP3Cli>
	RegisterCommand("setdelay",new ledSetDelay(&ledblue));
 80007d6:	2008      	movs	r0, #8
 80007d8:	f003 fe21 	bl	800441e <_Znwj>
 80007dc:	4603      	mov	r3, r0
 80007de:	461c      	mov	r4, r3
 80007e0:	4904      	ldr	r1, [pc, #16]	; (80007f4 <_Z7initCLIv+0x70>)
 80007e2:	4620      	mov	r0, r4
 80007e4:	f7ff ffa0 	bl	8000728 <_ZN11ledSetDelayC1EP3LED>
 80007e8:	4621      	mov	r1, r4
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <_Z7initCLIv+0x80>)
 80007ec:	f000 f902 	bl	80009f4 <_Z15RegisterCommandPcP3Cli>
}
 80007f0:	bf00      	nop
 80007f2:	bd98      	pop	{r3, r4, r7, pc}
 80007f4:	200001d0 	.word	0x200001d0
 80007f8:	080059d0 	.word	0x080059d0
 80007fc:	080059d8 	.word	0x080059d8
 8000800:	080059e0 	.word	0x080059e0
 8000804:	080059ec 	.word	0x080059ec

08000808 <_ZN11ledSetDelayD1Ev>:
class ledSetDelay : public Cli{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	4a05      	ldr	r2, [pc, #20]	; (8000828 <_ZN11ledSetDelayD1Ev+0x20>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fed7 	bl	80005cc <_ZN3CliD1Ev>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08005a2c 	.word	0x08005a2c

0800082c <_ZN11ledSetDelayD0Ev>:
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ffe7 	bl	8000808 <_ZN11ledSetDelayD1Ev>
 800083a:	2108      	movs	r1, #8
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f003 fdec 	bl	800441a <_ZdlPvj>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <_ZN8ledBlinkD1Ev>:
class ledBlink : public Cli{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	4a05      	ldr	r2, [pc, #20]	; (800086c <_ZN8ledBlinkD1Ev+0x20>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff feb5 	bl	80005cc <_ZN3CliD1Ev>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	08005a40 	.word	0x08005a40

08000870 <_ZN8ledBlinkD0Ev>:
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ffe7 	bl	800084c <_ZN8ledBlinkD1Ev>
 800087e:	2108      	movs	r1, #8
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f003 fdca 	bl	800441a <_ZdlPvj>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <_ZN6ledOffD1Ev>:
class ledOff : public Cli{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <_ZN6ledOffD1Ev+0x20>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe93 	bl	80005cc <_ZN3CliD1Ev>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	08005a54 	.word	0x08005a54

080008b4 <_ZN6ledOffD0Ev>:
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ffe7 	bl	8000890 <_ZN6ledOffD1Ev>
 80008c2:	2108      	movs	r1, #8
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f003 fda8 	bl	800441a <_ZdlPvj>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <_ZN5ledOnD1Ev>:
class ledOn : public Cli{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <_ZN5ledOnD1Ev+0x20>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe71 	bl	80005cc <_ZN3CliD1Ev>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	08005a68 	.word	0x08005a68

080008f8 <_ZN5ledOnD0Ev>:
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ffe7 	bl	80008d4 <_ZN5ledOnD1Ev>
 8000906:	2108      	movs	r1, #8
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f003 fd86 	bl	800441a <_ZdlPvj>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <_ZN3LEDC1EP12GPIO_TypeDeftiii10_LED_STATE>:
#include <stdio.h>
#include "mymain.h"
#include "main.h"
#include "LED.h"

LED::LED(GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin,int blinkcount,int delay,int blink,LED_STATE STATE):
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	4613      	mov	r3, r2
 8000926:	80fb      	strh	r3, [r7, #6]
		GPIOx(GPIOx),GPIO_Pin(GPIO_Pin),blinkcount(blinkcount),delay(delay),blink(blink),STATE(STATE)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	88fa      	ldrh	r2, [r7, #6]
 8000932:	809a      	strh	r2, [r3, #4]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	683a      	ldr	r2, [r7, #0]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	69fa      	ldr	r2, [r7, #28]
 8000944:	611a      	str	r2, [r3, #16]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f897 2020 	ldrb.w	r2, [r7, #32]
 800094c:	751a      	strb	r2, [r3, #20]
{
}
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4618      	mov	r0, r3
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <_ZN3LED6Led_OnEv>:

void LED::Led_On()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	889b      	ldrh	r3, [r3, #4]
 800096c:	2201      	movs	r2, #1
 800096e:	4619      	mov	r1, r3
 8000970:	f001 f872 	bl	8001a58 <HAL_GPIO_WritePin>

}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <_ZN3LED7Led_OffEv>:
void LED::Led_Off()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	889b      	ldrh	r3, [r3, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	f001 f862 	bl	8001a58 <HAL_GPIO_WritePin>

}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <_ZN3LED9LED_delayEi>:
void LED::LED_delay(int num){
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	delay = num;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	60da      	str	r2, [r3, #12]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <_ZN3LED9Led_BlinkEv>:
void LED::Led_Blink()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	if (blinkcount >= delay){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689a      	ldr	r2, [r3, #8]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	db0a      	blt.n	80009e2 <_ZN3LED9Led_BlinkEv+0x2a>
		HAL_GPIO_TogglePin(GPIOx,GPIO_Pin);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	889b      	ldrh	r3, [r3, #4]
 80009d4:	4619      	mov	r1, r3
 80009d6:	4610      	mov	r0, r2
 80009d8:	f001 f856 	bl	8001a88 <HAL_GPIO_TogglePin>
		blinkcount = 0;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
	}
		blinkcount++;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	609a      	str	r2, [r3, #8]
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_Z15RegisterCommandPcP3Cli>:
uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
int cmdcount = 0;
int cmdprint = 0;
int funcounter = 0;

void RegisterCommand(char* CommandName, Cli * clicommand) {
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	container[funcounter].command = clicommand;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <_Z15RegisterCommandPcP3Cli+0x3c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <_Z15RegisterCommandPcP3Cli+0x40>)
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	4413      	add	r3, r2
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
	container[funcounter].CommandName = CommandName;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <_Z15RegisterCommandPcP3Cli+0x3c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4908      	ldr	r1, [pc, #32]	; (8000a34 <_Z15RegisterCommandPcP3Cli+0x40>)
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	funcounter++;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <_Z15RegisterCommandPcP3Cli+0x3c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <_Z15RegisterCommandPcP3Cli+0x3c>)
 8000a20:	6013      	str	r3, [r2, #0]
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	200000fc 	.word	0x200000fc
 8000a34:	20000318 	.word	0x20000318

08000a38 <_Z8commTaskv>:

int commTask() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8000a3e:	1db9      	adds	r1, r7, #6
 8000a40:	230a      	movs	r3, #10
 8000a42:	2201      	movs	r2, #1
 8000a44:	4839      	ldr	r0, [pc, #228]	; (8000b2c <_Z8commTaskv+0xf4>)
 8000a46:	f002 ffaf 	bl	80039a8 <HAL_UART_Receive>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK) {
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d025      	beq.n	8000aa0 <_Z8commTaskv+0x68>
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0) {
 8000a54:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <_Z8commTaskv+0xf4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	bf14      	ite	ne
 8000a62:	2301      	movne	r3, #1
 8000a64:	2300      	moveq	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <_Z8commTaskv+0x3c>
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000a6c:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <_Z8commTaskv+0xf4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2208      	movs	r2, #8
 8000a72:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount) {
 8000a74:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <_Z8commTaskv+0xf8>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <_Z8commTaskv+0xfc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	da0d      	bge.n	8000a9c <_Z8commTaskv+0x64>
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <_Z8commTaskv+0xf8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	1c5a      	adds	r2, r3, #1
 8000a86:	492a      	ldr	r1, [pc, #168]	; (8000b30 <_Z8commTaskv+0xf8>)
 8000a88:	600a      	str	r2, [r1, #0]
 8000a8a:	4a2b      	ldr	r2, [pc, #172]	; (8000b38 <_Z8commTaskv+0x100>)
 8000a8c:	1899      	adds	r1, r3, r2
 8000a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a92:	2201      	movs	r2, #1
 8000a94:	4825      	ldr	r0, [pc, #148]	; (8000b2c <_Z8commTaskv+0xf4>)
 8000a96:	f002 fef3 	bl	8003880 <HAL_UART_Transmit>
		while (cmdprint < cmdcount) {
 8000a9a:	e7eb      	b.n	8000a74 <_Z8commTaskv+0x3c>
		}

		return 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e040      	b.n	8000b22 <_Z8commTaskv+0xea>
	}

	if (ch != '\r' && ch != '\n') {
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	2b0d      	cmp	r3, #13
 8000aa4:	d016      	beq.n	8000ad4 <_Z8commTaskv+0x9c>
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	2b0a      	cmp	r3, #10
 8000aaa:	d013      	beq.n	8000ad4 <_Z8commTaskv+0x9c>
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH) {
 8000aac:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <_Z8commTaskv+0xfc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b63      	cmp	r3, #99	; 0x63
 8000ab2:	dd05      	ble.n	8000ac0 <_Z8commTaskv+0x88>
			cmdcount = 0;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <_Z8commTaskv+0xfc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <_Z8commTaskv+0xf8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <_Z8commTaskv+0xfc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	491b      	ldr	r1, [pc, #108]	; (8000b34 <_Z8commTaskv+0xfc>)
 8000ac8:	600a      	str	r2, [r1, #0]
 8000aca:	79b9      	ldrb	r1, [r7, #6]
 8000acc:	4a1a      	ldr	r2, [pc, #104]	; (8000b38 <_Z8commTaskv+0x100>)
 8000ace:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e026      	b.n	8000b22 <_Z8commTaskv+0xea>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount) {
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <_Z8commTaskv+0xf8>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <_Z8commTaskv+0xfc>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	da0d      	bge.n	8000afc <_Z8commTaskv+0xc4>
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <_Z8commTaskv+0xf8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	1c5a      	adds	r2, r3, #1
 8000ae6:	4912      	ldr	r1, [pc, #72]	; (8000b30 <_Z8commTaskv+0xf8>)
 8000ae8:	600a      	str	r2, [r1, #0]
 8000aea:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <_Z8commTaskv+0x100>)
 8000aec:	1899      	adds	r1, r3, r2
 8000aee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000af2:	2201      	movs	r2, #1
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <_Z8commTaskv+0xf4>)
 8000af6:	f002 fec3 	bl	8003880 <HAL_UART_Transmit>
	while (cmdprint < cmdcount) {
 8000afa:	e7eb      	b.n	8000ad4 <_Z8commTaskv+0x9c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 0xFFFF);
 8000afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b00:	2202      	movs	r2, #2
 8000b02:	490e      	ldr	r1, [pc, #56]	; (8000b3c <_Z8commTaskv+0x104>)
 8000b04:	4809      	ldr	r0, [pc, #36]	; (8000b2c <_Z8commTaskv+0xf4>)
 8000b06:	f002 febb 	bl	8003880 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <_Z8commTaskv+0xfc>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <_Z8commTaskv+0x100>)
 8000b10:	2100      	movs	r1, #0
 8000b12:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <_Z8commTaskv+0xfc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <_Z8commTaskv+0xf8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
	return 1;
 8000b20:	2301      	movs	r3, #1
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000014c 	.word	0x2000014c
 8000b30:	200000f8 	.word	0x200000f8
 8000b34:	200000f4 	.word	0x200000f4
 8000b38:	20000090 	.word	0x20000090
 8000b3c:	080059f8 	.word	0x080059f8

08000b40 <_Z13handleCommandv>:

void handleCommand() {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af00      	add	r7, sp, #0
	char cmd[20];
	char param[20];


	int params = sscanf((const char*) cmdbuffer, "%s %s", cmd, param);
 8000b46:	463b      	mov	r3, r7
 8000b48:	f107 0214 	add.w	r2, r7, #20
 8000b4c:	491b      	ldr	r1, [pc, #108]	; (8000bbc <_Z13handleCommandv+0x7c>)
 8000b4e:	481c      	ldr	r0, [pc, #112]	; (8000bc0 <_Z13handleCommandv+0x80>)
 8000b50:	f003 fe8e 	bl	8004870 <siscanf>
 8000b54:	62b8      	str	r0, [r7, #40]	; 0x28

	for (int j = 0; j < funcounter; j++) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <_Z13handleCommandv+0x84>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b60:	429a      	cmp	r2, r3
 8000b62:	da20      	bge.n	8000ba6 <_Z13handleCommandv+0x66>
		if (strcmp(cmd, container[j].CommandName) == 0) {
 8000b64:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <_Z13handleCommandv+0x88>)
 8000b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fb2c 	bl	80001d0 <strcmp>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10f      	bne.n	8000b9e <_Z13handleCommandv+0x5e>
			container[j].command->doCommand(param);
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <_Z13handleCommandv+0x88>)
 8000b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	4413      	add	r3, r2
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	490f      	ldr	r1, [pc, #60]	; (8000bc8 <_Z13handleCommandv+0x88>)
 8000b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	440b      	add	r3, r1
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4639      	mov	r1, r7
 8000b98:	4610      	mov	r0, r2
 8000b9a:	4798      	blx	r3
					return;
 8000b9c:	e00b      	b.n	8000bb6 <_Z13handleCommandv+0x76>
	for (int j = 0; j < funcounter; j++) {
 8000b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ba4:	e7d9      	b.n	8000b5a <_Z13handleCommandv+0x1a>
			return;
		}

	}

	if (params == 0) {
 8000ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <_Z13handleCommandv+0x74>
		return;
	}
	else {
		printf("Invalid command\r\n");
 8000bac:	4807      	ldr	r0, [pc, #28]	; (8000bcc <_Z13handleCommandv+0x8c>)
 8000bae:	f003 fe03 	bl	80047b8 <puts>
 8000bb2:	e000      	b.n	8000bb6 <_Z13handleCommandv+0x76>
		return;
 8000bb4:	bf00      	nop
	}
}
 8000bb6:	3730      	adds	r7, #48	; 0x30
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	080059fc 	.word	0x080059fc
 8000bc0:	20000090 	.word	0x20000090
 8000bc4:	200000fc 	.word	0x200000fc
 8000bc8:	20000318 	.word	0x20000318
 8000bcc:	08005a04 	.word	0x08005a04

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f000 fc08 	bl	80013e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f814 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f000 f8ca 	bl	8000d74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000be0:	f000 f898 	bl	8000d14 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000be4:	f000 f860 	bl	8000ca8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000be8:	2036      	movs	r0, #54	; 0x36
 8000bea:	f000 fd70 	bl	80016ce <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim6);
 8000bee:	4804      	ldr	r0, [pc, #16]	; (8000c00 <main+0x30>)
 8000bf0:	f002 fb00 	bl	80031f4 <HAL_TIM_Base_Start_IT>
  mymain();
 8000bf4:	f000 f9a2 	bl	8000f3c <mymain>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  myloop();
 8000bf8:	f000 f9a6 	bl	8000f48 <myloop>
 8000bfc:	e7fc      	b.n	8000bf8 <main+0x28>
 8000bfe:	bf00      	nop
 8000c00:	20000100 	.word	0x20000100

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b096      	sub	sp, #88	; 0x58
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2244      	movs	r2, #68	; 0x44
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f003 fc7a 	bl	800450c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c2a:	f000 ff79 	bl	8001b20 <HAL_PWREx_ControlVoltageScaling>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c34:	f000 f932 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c42:	2310      	movs	r3, #16
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c46:	2302      	movs	r3, #2
 8000c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c52:	230a      	movs	r3, #10
 8000c54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c56:	2307      	movs	r3, #7
 8000c58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 ffb0 	bl	8001bcc <HAL_RCC_OscConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c72:	f000 f913 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c76:	230f      	movs	r3, #15
 8000c78:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fb78 	bl	8002384 <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c9a:	f000 f8ff 	bl	8000e9c <Error_Handler>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3758      	adds	r7, #88	; 0x58
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_TIM6_Init+0x64>)
 8000cba:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <MX_TIM6_Init+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_TIM6_Init+0x64>)
 8000cc0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000cc4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_TIM6_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_TIM6_Init+0x64>)
 8000cce:	220a      	movs	r2, #10
 8000cd0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_TIM6_Init+0x64>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_TIM6_Init+0x64>)
 8000cda:	f002 fa33 	bl	8003144 <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ce4:	f000 f8da 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_TIM6_Init+0x64>)
 8000cf6:	f002 fccf 	bl	8003698 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d00:	f000 f8cc 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000100 	.word	0x20000100
 8000d10:	40001000 	.word	0x40001000

08000d14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d1a:	4a15      	ldr	r2, [pc, #84]	; (8000d70 <MX_USART2_UART_Init+0x5c>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d58:	f002 fd44 	bl	80037e4 <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d62:	f000 f89b 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000014c 	.word	0x2000014c
 8000d70:	40004400 	.word	0x40004400

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a40      	ldr	r2, [pc, #256]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b3e      	ldr	r3, [pc, #248]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da2:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a3a      	ldr	r2, [pc, #232]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4a34      	ldr	r2, [pc, #208]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4a2e      	ldr	r2, [pc, #184]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2160      	movs	r1, #96	; 0x60
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f000 fe31 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dfc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4821      	ldr	r0, [pc, #132]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000e0e:	f000 fc79 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 8000e12:	2360      	movs	r3, #96	; 0x60
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f000 fc6a 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonPA10_Pin */
  GPIO_InitStruct.Pin = buttonPA10_Pin;
 8000e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buttonPA10_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4a:	f000 fc5b 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonPB3_Pin */
  GPIO_InitStruct.Pin = buttonPB3_Pin;
 8000e4e:	2308      	movs	r3, #8
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e52:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buttonPB3_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_GPIO_Init+0x124>)
 8000e64:	f000 fc4e 	bl	8001704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2009      	movs	r0, #9
 8000e6e:	f000 fc12 	bl	8001696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e72:	2009      	movs	r0, #9
 8000e74:	f000 fc2b 	bl	80016ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2028      	movs	r0, #40	; 0x28
 8000e7e:	f000 fc0a 	bl	8001696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e82:	2028      	movs	r0, #40	; 0x28
 8000e84:	f000 fc23 	bl	80016ce <HAL_NVIC_EnableIRQ>

}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000800 	.word	0x48000800
 8000e98:	48000400 	.word	0x48000400

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>

08000ea6 <_ZN4TimeC1Eiii>:
#include "mymain.h"
#include "main.h"
#include "myTime.h"
#include <stdlib.h>

Time::Time(int sec, int min, int hour):
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	603b      	str	r3, [r7, #0]
			sec(sec),min(min),hour(hour)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	609a      	str	r2, [r3, #8]
{
	memset(buff, 0, sizeof(buff));
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	330c      	adds	r3, #12
 8000eca:	2209      	movs	r2, #9
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 fb1c 	bl	800450c <memset>
}
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_ZN4TimeC1Ev>:

Time::Time():
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
			sec(0),min(0),hour(0)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
{
	memset(buff, 0, sizeof(buff));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	330c      	adds	r3, #12
 8000efc:	2209      	movs	r2, #9
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fb03 	bl	800450c <memset>
}
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_write>:
Time time2 = Time(22,34,2);
Time times[10];
CliContainer container[10];
int blinkOn = 0;
int _write(int fd, char* ptr, int len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <_write+0x28>)
 8000f28:	f002 fcaa 	bl	8003880 <HAL_UART_Transmit>
	return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000014c 	.word	0x2000014c

08000f3c <mymain>:
void mymain(){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	initCLI();
 8000f40:	f7ff fc20 	bl	8000784 <_Z7initCLIv>
//	Time time3 = time1+(time2);
//	printf("time1 is %s \r\n",time1.toString());
//	printf("time1 is %s \r\n",time3.toString());
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <myloop>:
void myloop(){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	if (commTask()){
 8000f4c:	f7ff fd74 	bl	8000a38 <_Z8commTaskv>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bf14      	ite	ne
 8000f56:	2301      	movne	r3, #1
 8000f58:	2300      	moveq	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <myloop+0x1c>
		 handleCommand();
 8000f60:	f7ff fdee 	bl	8000b40 <_Z13handleCommandv>
	}
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	if(blinkOn== 1){
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d102      	bne.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x16>
		ledblue.Led_Blink();
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f7a:	f7ff fd1d 	bl	80009b8 <_ZN3LED9Led_BlinkEv>
	}
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000368 	.word	0x20000368
 8000f8c:	200001d0 	.word	0x200001d0

08000f90 <_Z41__static_initialization_and_destruction_0ii>:
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d134      	bne.n	800100a <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d12f      	bne.n	800100a <_Z41__static_initialization_and_destruction_0ii+0x7a>
LED ledblue = LED(LD1_GPIO_Port,LD1_Pin,0,0,0,LED_STATE_OFF);
 8000faa:	2300      	movs	r3, #0
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	2240      	movs	r2, #64	; 0x40
 8000fba:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000fbe:	4815      	ldr	r0, [pc, #84]	; (8001014 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000fc0:	f7ff fcaa 	bl	8000918 <_ZN3LEDC1EP12GPIO_TypeDeftiii10_LED_STATE>
BUTTON pb3 = BUTTON(buttonPB3_GPIO_Port,buttonPB3_Pin);
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	4914      	ldr	r1, [pc, #80]	; (8001018 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8000fc8:	4814      	ldr	r0, [pc, #80]	; (800101c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000fca:	f7ff faeb 	bl	80005a4 <_ZN6BUTTONC1EP12GPIO_TypeDeft>
BUTTON pa10 = BUTTON(buttonPA10_GPIO_Port,buttonPA10_Pin);
 8000fce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000fd6:	4812      	ldr	r0, [pc, #72]	; (8001020 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000fd8:	f7ff fae4 	bl	80005a4 <_ZN6BUTTONC1EP12GPIO_TypeDeft>
Time time1 = Time(50, 30, 14);
 8000fdc:	230e      	movs	r3, #14
 8000fde:	221e      	movs	r2, #30
 8000fe0:	2132      	movs	r1, #50	; 0x32
 8000fe2:	4810      	ldr	r0, [pc, #64]	; (8001024 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000fe4:	f7ff ff5f 	bl	8000ea6 <_ZN4TimeC1Eiii>
Time time2 = Time(22,34,2);
 8000fe8:	2302      	movs	r3, #2
 8000fea:	2222      	movs	r2, #34	; 0x22
 8000fec:	2116      	movs	r1, #22
 8000fee:	480e      	ldr	r0, [pc, #56]	; (8001028 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8000ff0:	f7ff ff59 	bl	8000ea6 <_ZN4TimeC1Eiii>
Time times[10];
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8000ff6:	2409      	movs	r4, #9
 8000ff8:	461d      	mov	r5, r3
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	db05      	blt.n	800100a <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8000ffe:	4628      	mov	r0, r5
 8001000:	f7ff ff6d 	bl	8000ede <_ZN4TimeC1Ev>
 8001004:	3518      	adds	r5, #24
 8001006:	3c01      	subs	r4, #1
 8001008:	e7f7      	b.n	8000ffa <_Z41__static_initialization_and_destruction_0ii+0x6a>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bdb0      	pop	{r4, r5, r7, pc}
 8001012:	bf00      	nop
 8001014:	200001d0 	.word	0x200001d0
 8001018:	48000400 	.word	0x48000400
 800101c:	200001e8 	.word	0x200001e8
 8001020:	200001f0 	.word	0x200001f0
 8001024:	200001f8 	.word	0x200001f8
 8001028:	20000210 	.word	0x20000210
 800102c:	20000228 	.word	0x20000228

08001030 <_GLOBAL__sub_I_ledblue>:
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
 8001034:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff ffa9 	bl	8000f90 <_Z41__static_initialization_and_destruction_0ii>
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_MspInit+0x44>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <HAL_MspInit+0x44>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6613      	str	r3, [r2, #96]	; 0x60
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <HAL_MspInit+0x44>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_MspInit+0x44>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_MspInit+0x44>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	6593      	str	r3, [r2, #88]	; 0x58
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_MspInit+0x44>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <HAL_TIM_Base_MspInit+0x44>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d113      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_TIM_Base_MspInit+0x48>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <HAL_TIM_Base_MspInit+0x48>)
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	6593      	str	r3, [r2, #88]	; 0x58
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_TIM_Base_MspInit+0x48>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2036      	movs	r0, #54	; 0x36
 80010b8:	f000 faed 	bl	8001696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010bc:	2036      	movs	r0, #54	; 0x36
 80010be:	f000 fb06 	bl	80016ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40001000 	.word	0x40001000
 80010d0:	40021000 	.word	0x40021000

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ac      	sub	sp, #176	; 0xb0
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2288      	movs	r2, #136	; 0x88
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fa09 	bl	800450c <memset>
  if(huart->Instance==USART2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a21      	ldr	r2, [pc, #132]	; (8001184 <HAL_UART_MspInit+0xb0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d13b      	bne.n	800117c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001104:	2302      	movs	r3, #2
 8001106:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4618      	mov	r0, r3
 8001112:	f001 fb5b 	bl	80027cc <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800111c:	f7ff febe 	bl	8000e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_UART_MspInit+0xb4>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001124:	4a18      	ldr	r2, [pc, #96]	; (8001188 <HAL_UART_MspInit+0xb4>)
 8001126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112a:	6593      	str	r3, [r2, #88]	; 0x58
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_UART_MspInit+0xb4>)
 800112e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_UART_MspInit+0xb4>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	4a12      	ldr	r2, [pc, #72]	; (8001188 <HAL_UART_MspInit+0xb4>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <HAL_UART_MspInit+0xb4>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001150:	230c      	movs	r3, #12
 8001152:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001168:	2307      	movs	r3, #7
 800116a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f000 fac4 	bl	8001704 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	37b0      	adds	r7, #176	; 0xb0
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40004400 	.word	0x40004400
 8001188:	40021000 	.word	0x40021000

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d8:	f000 f962 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(buttonPB3_Pin);
 80011e4:	2008      	movs	r0, #8
 80011e6:	f000 fc69 	bl	8001abc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}

080011ee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(buttonPA10_Pin);
 80011f2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011f6:	f000 fc61 	bl	8001abc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011fe:	f000 fc5d 	bl	8001abc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <TIM6_DAC_IRQHandler+0x10>)
 800120e:	f002 f861 	bl	80032d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000100 	.word	0x20000100

0800121c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	return 1;
 8001220:	2301      	movs	r3, #1
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_kill>:

int _kill(int pid, int sig)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001236:	f003 f92f 	bl	8004498 <__errno>
 800123a:	4603      	mov	r3, r0
 800123c:	2216      	movs	r2, #22
 800123e:	601a      	str	r2, [r3, #0]
	return -1;
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_exit>:

void _exit (int status)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ffe7 	bl	800122c <_kill>
	while (1) {}		/* Make sure we hang here */
 800125e:	e7fe      	b.n	800125e <_exit+0x12>

08001260 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	e00a      	b.n	8001288 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001272:	f3af 8000 	nop.w
 8001276:	4601      	mov	r1, r0
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60ba      	str	r2, [r7, #8]
 800127e:	b2ca      	uxtb	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbf0      	blt.n	8001272 <_read+0x12>
	}

return len;
 8001290:	687b      	ldr	r3, [r7, #4]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_close>:
	}
	return len;
}

int _close(int file)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
	return -1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c2:	605a      	str	r2, [r3, #4]
	return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_isatty>:

int _isatty(int file)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	return 1;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001334:	f003 f8b0 	bl	8004498 <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	220c      	movs	r2, #12
 800133c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20018000 	.word	0x20018000
 8001364:	00000400 	.word	0x00000400
 8001368:	2000036c 	.word	0x2000036c
 800136c:	20000388 	.word	0x20000388

08001370 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <SystemInit+0x20>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <SystemInit+0x20>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001398:	f7ff ffea 	bl	8001370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800139e:	490d      	ldr	r1, [pc, #52]	; (80013d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <LoopForever+0xe>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b4:	4c0a      	ldr	r4, [pc, #40]	; (80013e0 <LoopForever+0x16>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c2:	f003 f86f 	bl	80044a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013c6:	f7ff fc03 	bl	8000bd0 <main>

080013ca <LoopForever>:

LoopForever:
    b LoopForever
 80013ca:	e7fe      	b.n	80013ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013d8:	08005c6c 	.word	0x08005c6c
  ldr r2, =_sbss
 80013dc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013e0:	20000388 	.word	0x20000388

080013e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC1_2_IRQHandler>
	...

080013e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_Init+0x3c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <HAL_Init+0x3c>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fe:	2003      	movs	r0, #3
 8001400:	f000 f93e 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001404:	2000      	movs	r0, #0
 8001406:	f000 f80f 	bl	8001428 <HAL_InitTick>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	e001      	b.n	800141a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001416:	f7ff fe13 	bl	8001040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800141a:	79fb      	ldrb	r3, [r7, #7]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40022000 	.word	0x40022000

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_InitTick+0x6c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d023      	beq.n	8001484 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_InitTick+0x70>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <HAL_InitTick+0x6c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f949 	bl	80016ea <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10f      	bne.n	800147e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d809      	bhi.n	8001478 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f000 f913 	bl	8001696 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_InitTick+0x74>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e007      	b.n	8001488 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	e004      	b.n	8001488 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	e001      	b.n	8001488 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008
 8001498:	20000000 	.word	0x20000000
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20000370 	.word	0x20000370

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000370 	.word	0x20000370

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <__NVIC_EnableIRQ+0x38>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800164c:	d301      	bcc.n	8001652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164e:	2301      	movs	r3, #1
 8001650:	e00f      	b.n	8001672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <SysTick_Config+0x40>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165a:	210f      	movs	r1, #15
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f7ff ff8e 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <SysTick_Config+0x40>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166a:	4b04      	ldr	r3, [pc, #16]	; (800167c <SysTick_Config+0x40>)
 800166c:	2207      	movs	r2, #7
 800166e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	e000e010 	.word	0xe000e010

08001680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff29 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff3e 	bl	8001528 <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ff8e 	bl	80015d4 <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff5d 	bl	8001580 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff31 	bl	8001544 <__NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffa2 	bl	800163c <SysTick_Config>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001712:	e17f      	b.n	8001a14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2101      	movs	r1, #1
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8171 	beq.w	8001a0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d005      	beq.n	8001744 <HAL_GPIO_Init+0x40>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d130      	bne.n	80017a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800177a:	2201      	movs	r2, #1
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	f003 0201 	and.w	r2, r3, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d118      	bne.n	80017e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017b8:	2201      	movs	r2, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	08db      	lsrs	r3, r3, #3
 80017ce:	f003 0201 	and.w	r2, r3, #1
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d017      	beq.n	8001820 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d123      	bne.n	8001874 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	08da      	lsrs	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3208      	adds	r2, #8
 8001834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	6939      	ldr	r1, [r7, #16]
 8001870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0203 	and.w	r2, r3, #3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80ac 	beq.w	8001a0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b5f      	ldr	r3, [pc, #380]	; (8001a34 <HAL_GPIO_Init+0x330>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	4a5e      	ldr	r2, [pc, #376]	; (8001a34 <HAL_GPIO_Init+0x330>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6613      	str	r3, [r2, #96]	; 0x60
 80018c2:	4b5c      	ldr	r3, [pc, #368]	; (8001a34 <HAL_GPIO_Init+0x330>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ce:	4a5a      	ldr	r2, [pc, #360]	; (8001a38 <HAL_GPIO_Init+0x334>)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018f8:	d025      	beq.n	8001946 <HAL_GPIO_Init+0x242>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4f      	ldr	r2, [pc, #316]	; (8001a3c <HAL_GPIO_Init+0x338>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d01f      	beq.n	8001942 <HAL_GPIO_Init+0x23e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4e      	ldr	r2, [pc, #312]	; (8001a40 <HAL_GPIO_Init+0x33c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d019      	beq.n	800193e <HAL_GPIO_Init+0x23a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4d      	ldr	r2, [pc, #308]	; (8001a44 <HAL_GPIO_Init+0x340>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0x236>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4c      	ldr	r2, [pc, #304]	; (8001a48 <HAL_GPIO_Init+0x344>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00d      	beq.n	8001936 <HAL_GPIO_Init+0x232>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4b      	ldr	r2, [pc, #300]	; (8001a4c <HAL_GPIO_Init+0x348>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d007      	beq.n	8001932 <HAL_GPIO_Init+0x22e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4a      	ldr	r2, [pc, #296]	; (8001a50 <HAL_GPIO_Init+0x34c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d101      	bne.n	800192e <HAL_GPIO_Init+0x22a>
 800192a:	2306      	movs	r3, #6
 800192c:	e00c      	b.n	8001948 <HAL_GPIO_Init+0x244>
 800192e:	2307      	movs	r3, #7
 8001930:	e00a      	b.n	8001948 <HAL_GPIO_Init+0x244>
 8001932:	2305      	movs	r3, #5
 8001934:	e008      	b.n	8001948 <HAL_GPIO_Init+0x244>
 8001936:	2304      	movs	r3, #4
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x244>
 800193a:	2303      	movs	r3, #3
 800193c:	e004      	b.n	8001948 <HAL_GPIO_Init+0x244>
 800193e:	2302      	movs	r3, #2
 8001940:	e002      	b.n	8001948 <HAL_GPIO_Init+0x244>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x244>
 8001946:	2300      	movs	r3, #0
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	f002 0203 	and.w	r2, r2, #3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4093      	lsls	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001958:	4937      	ldr	r1, [pc, #220]	; (8001a38 <HAL_GPIO_Init+0x334>)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001966:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_GPIO_Init+0x350>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800198a:	4a32      	ldr	r2, [pc, #200]	; (8001a54 <HAL_GPIO_Init+0x350>)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <HAL_GPIO_Init+0x350>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019b4:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <HAL_GPIO_Init+0x350>)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_GPIO_Init+0x350>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019de:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_GPIO_Init+0x350>)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_GPIO_Init+0x350>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a08:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <HAL_GPIO_Init+0x350>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f47f ae78 	bne.w	8001714 <HAL_GPIO_Init+0x10>
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	48000400 	.word	0x48000400
 8001a40:	48000800 	.word	0x48000800
 8001a44:	48000c00 	.word	0x48000c00
 8001a48:	48001000 	.word	0x48001000
 8001a4c:	48001400 	.word	0x48001400
 8001a50:	48001800 	.word	0x48001800
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	041a      	lsls	r2, r3, #16
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43d9      	mvns	r1, r3
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d006      	beq.n	8001ae0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f806 	bl	8001aec <HAL_GPIO_EXTI_Callback>
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40007000 	.word	0x40007000

08001b20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b2e:	d130      	bne.n	8001b92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b3c:	d038      	beq.n	8001bb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b46:	4a1e      	ldr	r2, [pc, #120]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2232      	movs	r2, #50	; 0x32
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0c9b      	lsrs	r3, r3, #18
 8001b60:	3301      	adds	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b64:	e002      	b.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b78:	d102      	bne.n	8001b80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f2      	bne.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b8c:	d110      	bne.n	8001bb0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e00f      	b.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9e:	d007      	beq.n	8001bb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ba8:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	431bde83 	.word	0x431bde83

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e3ca      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bde:	4b97      	ldr	r3, [pc, #604]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be8:	4b94      	ldr	r3, [pc, #592]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80e4 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d007      	beq.n	8001c16 <HAL_RCC_OscConfig+0x4a>
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b0c      	cmp	r3, #12
 8001c0a:	f040 808b 	bne.w	8001d24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	f040 8087 	bne.w	8001d24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c16:	4b89      	ldr	r3, [pc, #548]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_RCC_OscConfig+0x62>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e3a2      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1a      	ldr	r2, [r3, #32]
 8001c32:	4b82      	ldr	r3, [pc, #520]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d004      	beq.n	8001c48 <HAL_RCC_OscConfig+0x7c>
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c46:	e005      	b.n	8001c54 <HAL_RCC_OscConfig+0x88>
 8001c48:	4b7c      	ldr	r3, [pc, #496]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d223      	bcs.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 fd55 	bl	800270c <RCC_SetFlashLatencyFromMSIRange>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e383      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c6c:	4b73      	ldr	r3, [pc, #460]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a72      	ldr	r2, [pc, #456]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b70      	ldr	r3, [pc, #448]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	496d      	ldr	r1, [pc, #436]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c8a:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	4968      	ldr	r1, [pc, #416]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
 8001c9e:	e025      	b.n	8001cec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ca0:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a65      	ldr	r2, [pc, #404]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4960      	ldr	r1, [pc, #384]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	495b      	ldr	r1, [pc, #364]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fd15 	bl	800270c <RCC_SetFlashLatencyFromMSIRange>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e343      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cec:	f000 fc4a 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b52      	ldr	r3, [pc, #328]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	4950      	ldr	r1, [pc, #320]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	4a4e      	ldr	r2, [pc, #312]	; (8001e44 <HAL_RCC_OscConfig+0x278>)
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d0c:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fb89 	bl	8001428 <HAL_InitTick>
 8001d16:	4603      	mov	r3, r0
 8001d18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d052      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	e327      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d032      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d2c:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a42      	ldr	r2, [pc, #264]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fbc6 	bl	80014c8 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d40:	f7ff fbc2 	bl	80014c8 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e310      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d52:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d5e:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a36      	ldr	r2, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4931      	ldr	r1, [pc, #196]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	492c      	ldr	r1, [pc, #176]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
 8001d90:	e01a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d92:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a29      	ldr	r2, [pc, #164]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fb93 	bl	80014c8 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001da6:	f7ff fb8f 	bl	80014c8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e2dd      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001db8:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x1da>
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d074      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d005      	beq.n	8001de6 <HAL_RCC_OscConfig+0x21a>
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d10e      	bne.n	8001dfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d10b      	bne.n	8001dfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d064      	beq.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d160      	bne.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e2ba      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x24a>
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e026      	b.n	8001e64 <HAL_RCC_OscConfig+0x298>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1e:	d115      	bne.n	8001e4c <HAL_RCC_OscConfig+0x280>
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a02      	ldr	r2, [pc, #8]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e014      	b.n	8001e64 <HAL_RCC_OscConfig+0x298>
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08005a88 	.word	0x08005a88
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	4ba0      	ldr	r3, [pc, #640]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a9f      	ldr	r2, [pc, #636]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b9d      	ldr	r3, [pc, #628]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a9c      	ldr	r2, [pc, #624]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d013      	beq.n	8001e94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fb2c 	bl	80014c8 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff fb28 	bl	80014c8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e276      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e86:	4b92      	ldr	r3, [pc, #584]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x2a8>
 8001e92:	e014      	b.n	8001ebe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff fb18 	bl	80014c8 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff fb14 	bl	80014c8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e262      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eae:	4b88      	ldr	r3, [pc, #544]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2d0>
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d060      	beq.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_OscConfig+0x310>
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d119      	bne.n	8001f0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d116      	bne.n	8001f0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001edc:	4b7c      	ldr	r3, [pc, #496]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x328>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e23f      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	4973      	ldr	r1, [pc, #460]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f08:	e040      	b.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d023      	beq.n	8001f5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f12:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6e      	ldr	r2, [pc, #440]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fad3 	bl	80014c8 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f26:	f7ff facf 	bl	80014c8 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e21d      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f38:	4b65      	ldr	r3, [pc, #404]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	4b62      	ldr	r3, [pc, #392]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	061b      	lsls	r3, r3, #24
 8001f52:	495f      	ldr	r1, [pc, #380]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
 8001f58:	e018      	b.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5a:	4b5d      	ldr	r3, [pc, #372]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a5c      	ldr	r2, [pc, #368]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7ff faaf 	bl	80014c8 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff faab 	bl	80014c8 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1f9      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d03c      	beq.n	8002012 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01c      	beq.n	8001fda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa0:	4b4b      	ldr	r3, [pc, #300]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7ff fa8a 	bl	80014c8 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fa86 	bl	80014c8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1d4      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ef      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x3ec>
 8001fd8:	e01b      	b.n	8002012 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe0:	4a3b      	ldr	r2, [pc, #236]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fea:	f7ff fa6d 	bl	80014c8 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fa69 	bl	80014c8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1b7      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002004:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ef      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80a6 	beq.w	800216c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002024:	4b2a      	ldr	r3, [pc, #168]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10d      	bne.n	800204c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203a:	6593      	str	r3, [r2, #88]	; 0x58
 800203c:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002048:	2301      	movs	r3, #1
 800204a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <HAL_RCC_OscConfig+0x508>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d118      	bne.n	800208a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_OscConfig+0x508>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <HAL_RCC_OscConfig+0x508>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002064:	f7ff fa30 	bl	80014c8 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206c:	f7ff fa2c 	bl	80014c8 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e17a      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_RCC_OscConfig+0x508>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d108      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4d8>
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a2:	e029      	b.n	80020f8 <HAL_RCC_OscConfig+0x52c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d115      	bne.n	80020d8 <HAL_RCC_OscConfig+0x50c>
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	4a03      	ldr	r2, [pc, #12]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020cc:	e014      	b.n	80020f8 <HAL_RCC_OscConfig+0x52c>
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40007000 	.word	0x40007000
 80020d8:	4b9c      	ldr	r3, [pc, #624]	; (800234c <HAL_RCC_OscConfig+0x780>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	4a9b      	ldr	r2, [pc, #620]	; (800234c <HAL_RCC_OscConfig+0x780>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e8:	4b98      	ldr	r3, [pc, #608]	; (800234c <HAL_RCC_OscConfig+0x780>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	4a97      	ldr	r2, [pc, #604]	; (800234c <HAL_RCC_OscConfig+0x780>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d016      	beq.n	800212e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7ff f9e2 	bl	80014c8 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002106:	e00a      	b.n	800211e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002108:	f7ff f9de 	bl	80014c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e12a      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211e:	4b8b      	ldr	r3, [pc, #556]	; (800234c <HAL_RCC_OscConfig+0x780>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ed      	beq.n	8002108 <HAL_RCC_OscConfig+0x53c>
 800212c:	e015      	b.n	800215a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7ff f9cb 	bl	80014c8 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7ff f9c7 	bl	80014c8 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e113      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800214c:	4b7f      	ldr	r3, [pc, #508]	; (800234c <HAL_RCC_OscConfig+0x780>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ed      	bne.n	8002136 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800215a:	7ffb      	ldrb	r3, [r7, #31]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002160:	4b7a      	ldr	r3, [pc, #488]	; (800234c <HAL_RCC_OscConfig+0x780>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002164:	4a79      	ldr	r2, [pc, #484]	; (800234c <HAL_RCC_OscConfig+0x780>)
 8002166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80fe 	beq.w	8002372 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	2b02      	cmp	r3, #2
 800217c:	f040 80d0 	bne.w	8002320 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002180:	4b72      	ldr	r3, [pc, #456]	; (800234c <HAL_RCC_OscConfig+0x780>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	429a      	cmp	r2, r3
 8002192:	d130      	bne.n	80021f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	3b01      	subs	r3, #1
 80021a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d127      	bne.n	80021f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d11f      	bne.n	80021f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021c0:	2a07      	cmp	r2, #7
 80021c2:	bf14      	ite	ne
 80021c4:	2201      	movne	r2, #1
 80021c6:	2200      	moveq	r2, #0
 80021c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d113      	bne.n	80021f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	3b01      	subs	r3, #1
 80021dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021de:	429a      	cmp	r2, r3
 80021e0:	d109      	bne.n	80021f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	085b      	lsrs	r3, r3, #1
 80021ee:	3b01      	subs	r3, #1
 80021f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d06e      	beq.n	80022d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	d069      	beq.n	80022d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021fc:	4b53      	ldr	r3, [pc, #332]	; (800234c <HAL_RCC_OscConfig+0x780>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002208:	4b50      	ldr	r3, [pc, #320]	; (800234c <HAL_RCC_OscConfig+0x780>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0ad      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002218:	4b4c      	ldr	r3, [pc, #304]	; (800234c <HAL_RCC_OscConfig+0x780>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a4b      	ldr	r2, [pc, #300]	; (800234c <HAL_RCC_OscConfig+0x780>)
 800221e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002222:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002224:	f7ff f950 	bl	80014c8 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7ff f94c 	bl	80014c8 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e09a      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223e:	4b43      	ldr	r3, [pc, #268]	; (800234c <HAL_RCC_OscConfig+0x780>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800224a:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_RCC_OscConfig+0x780>)
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	4b40      	ldr	r3, [pc, #256]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 8002250:	4013      	ands	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800225a:	3a01      	subs	r2, #1
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	4311      	orrs	r1, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002264:	0212      	lsls	r2, r2, #8
 8002266:	4311      	orrs	r1, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800226c:	0852      	lsrs	r2, r2, #1
 800226e:	3a01      	subs	r2, #1
 8002270:	0552      	lsls	r2, r2, #21
 8002272:	4311      	orrs	r1, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002278:	0852      	lsrs	r2, r2, #1
 800227a:	3a01      	subs	r2, #1
 800227c:	0652      	lsls	r2, r2, #25
 800227e:	4311      	orrs	r1, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002284:	0912      	lsrs	r2, r2, #4
 8002286:	0452      	lsls	r2, r2, #17
 8002288:	430a      	orrs	r2, r1
 800228a:	4930      	ldr	r1, [pc, #192]	; (800234c <HAL_RCC_OscConfig+0x780>)
 800228c:	4313      	orrs	r3, r2
 800228e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002290:	4b2e      	ldr	r3, [pc, #184]	; (800234c <HAL_RCC_OscConfig+0x780>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a2d      	ldr	r2, [pc, #180]	; (800234c <HAL_RCC_OscConfig+0x780>)
 8002296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800229c:	4b2b      	ldr	r3, [pc, #172]	; (800234c <HAL_RCC_OscConfig+0x780>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a2a      	ldr	r2, [pc, #168]	; (800234c <HAL_RCC_OscConfig+0x780>)
 80022a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022a8:	f7ff f90e 	bl	80014c8 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7ff f90a 	bl	80014c8 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e058      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c2:	4b22      	ldr	r3, [pc, #136]	; (800234c <HAL_RCC_OscConfig+0x780>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ce:	e050      	b.n	8002372 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e04f      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCC_OscConfig+0x780>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d148      	bne.n	8002372 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022e0:	4b1a      	ldr	r3, [pc, #104]	; (800234c <HAL_RCC_OscConfig+0x780>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a19      	ldr	r2, [pc, #100]	; (800234c <HAL_RCC_OscConfig+0x780>)
 80022e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022ec:	4b17      	ldr	r3, [pc, #92]	; (800234c <HAL_RCC_OscConfig+0x780>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a16      	ldr	r2, [pc, #88]	; (800234c <HAL_RCC_OscConfig+0x780>)
 80022f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022f8:	f7ff f8e6 	bl	80014c8 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002300:	f7ff f8e2 	bl	80014c8 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e030      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_RCC_OscConfig+0x780>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x734>
 800231e:	e028      	b.n	8002372 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2b0c      	cmp	r3, #12
 8002324:	d023      	beq.n	800236e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_OscConfig+0x780>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a08      	ldr	r2, [pc, #32]	; (800234c <HAL_RCC_OscConfig+0x780>)
 800232c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7ff f8c9 	bl	80014c8 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002338:	e00c      	b.n	8002354 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7ff f8c5 	bl	80014c8 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d905      	bls.n	8002354 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e013      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
 800234c:	40021000 	.word	0x40021000
 8002350:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_OscConfig+0x7b0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ec      	bne.n	800233a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_RCC_OscConfig+0x7b0>)
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	4905      	ldr	r1, [pc, #20]	; (800237c <HAL_RCC_OscConfig+0x7b0>)
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_RCC_OscConfig+0x7b4>)
 8002368:	4013      	ands	r3, r2
 800236a:	60cb      	str	r3, [r1, #12]
 800236c:	e001      	b.n	8002372 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	feeefffc 	.word	0xfeeefffc

08002384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0e7      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002398:	4b75      	ldr	r3, [pc, #468]	; (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d910      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b72      	ldr	r3, [pc, #456]	; (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	4970      	ldr	r1, [pc, #448]	; (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b6e      	ldr	r3, [pc, #440]	; (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0cf      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d010      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	4b66      	ldr	r3, [pc, #408]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d908      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e4:	4b63      	ldr	r3, [pc, #396]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4960      	ldr	r1, [pc, #384]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d04c      	beq.n	800249c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800240a:	4b5a      	ldr	r3, [pc, #360]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d121      	bne.n	800245a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0a6      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002422:	4b54      	ldr	r3, [pc, #336]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d115      	bne.n	800245a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e09a      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800243a:	4b4e      	ldr	r3, [pc, #312]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e08e      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800244a:	4b4a      	ldr	r3, [pc, #296]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e086      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800245a:	4b46      	ldr	r3, [pc, #280]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f023 0203 	bic.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4943      	ldr	r1, [pc, #268]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800246c:	f7ff f82c 	bl	80014c8 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	e00a      	b.n	800248a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002474:	f7ff f828 	bl	80014c8 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e06e      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	4b3a      	ldr	r3, [pc, #232]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 020c 	and.w	r2, r3, #12
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	429a      	cmp	r2, r3
 800249a:	d1eb      	bne.n	8002474 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d010      	beq.n	80024ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	4b31      	ldr	r3, [pc, #196]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d208      	bcs.n	80024ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	492b      	ldr	r1, [pc, #172]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ca:	4b29      	ldr	r3, [pc, #164]	; (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d210      	bcs.n	80024fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 0207 	bic.w	r2, r3, #7
 80024e0:	4923      	ldr	r1, [pc, #140]	; (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e8:	4b21      	ldr	r3, [pc, #132]	; (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d001      	beq.n	80024fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e036      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002506:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	4918      	ldr	r1, [pc, #96]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002514:	4313      	orrs	r3, r2
 8002516:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4910      	ldr	r1, [pc, #64]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002538:	f000 f824 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 800253c:	4602      	mov	r2, r0
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	490b      	ldr	r1, [pc, #44]	; (8002578 <HAL_RCC_ClockConfig+0x1f4>)
 800254a:	5ccb      	ldrb	r3, [r1, r3]
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	4a09      	ldr	r2, [pc, #36]	; (800257c <HAL_RCC_ClockConfig+0x1f8>)
 8002556:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_RCC_ClockConfig+0x1fc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe ff63 	bl	8001428 <HAL_InitTick>
 8002562:	4603      	mov	r3, r0
 8002564:	72fb      	strb	r3, [r7, #11]

  return status;
 8002566:	7afb      	ldrb	r3, [r7, #11]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40022000 	.word	0x40022000
 8002574:	40021000 	.word	0x40021000
 8002578:	08005a88 	.word	0x08005a88
 800257c:	20000000 	.word	0x20000000
 8002580:	20000004 	.word	0x20000004

08002584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002592:	4b3e      	ldr	r3, [pc, #248]	; (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800259c:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x34>
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	d121      	bne.n	80025f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d11e      	bne.n	80025f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025b8:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025c4:	4b31      	ldr	r3, [pc, #196]	; (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 80025c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	e005      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025d4:	4b2d      	ldr	r3, [pc, #180]	; (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025e0:	4a2b      	ldr	r2, [pc, #172]	; (8002690 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10d      	bne.n	800260c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d102      	bne.n	8002602 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_RCC_GetSysClockFreq+0x110>)
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	e004      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b08      	cmp	r3, #8
 8002606:	d101      	bne.n	800260c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002608:	4b23      	ldr	r3, [pc, #140]	; (8002698 <HAL_RCC_GetSysClockFreq+0x114>)
 800260a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d134      	bne.n	800267c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002612:	4b1e      	ldr	r3, [pc, #120]	; (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d003      	beq.n	800262a <HAL_RCC_GetSysClockFreq+0xa6>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d003      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0xac>
 8002628:	e005      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <HAL_RCC_GetSysClockFreq+0x110>)
 800262c:	617b      	str	r3, [r7, #20]
      break;
 800262e:	e005      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_RCC_GetSysClockFreq+0x114>)
 8002632:	617b      	str	r3, [r7, #20]
      break;
 8002634:	e002      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	617b      	str	r3, [r7, #20]
      break;
 800263a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	3301      	adds	r3, #1
 8002648:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	0a1b      	lsrs	r3, r3, #8
 8002650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	fb03 f202 	mul.w	r2, r3, r2
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	0e5b      	lsrs	r3, r3, #25
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	3301      	adds	r3, #1
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800267c:	69bb      	ldr	r3, [r7, #24]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	; 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	08005aa0 	.word	0x08005aa0
 8002694:	00f42400 	.word	0x00f42400
 8002698:	007a1200 	.word	0x007a1200

0800269c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000000 	.word	0x20000000

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026b8:	f7ff fff0 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4904      	ldr	r1, [pc, #16]	; (80026dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	08005a98 	.word	0x08005a98

080026e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026e4:	f7ff ffda 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	0adb      	lsrs	r3, r3, #11
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4904      	ldr	r1, [pc, #16]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	08005a98 	.word	0x08005a98

0800270c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002724:	f7ff f9ee 	bl	8001b04 <HAL_PWREx_GetVoltageRange>
 8002728:	6178      	str	r0, [r7, #20]
 800272a:	e014      	b.n	8002756 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	; 0x58
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002744:	f7ff f9de 	bl	8001b04 <HAL_PWREx_GetVoltageRange>
 8002748:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002754:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275c:	d10b      	bne.n	8002776 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b80      	cmp	r3, #128	; 0x80
 8002762:	d919      	bls.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2ba0      	cmp	r3, #160	; 0xa0
 8002768:	d902      	bls.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800276a:	2302      	movs	r3, #2
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	e013      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002770:	2301      	movs	r3, #1
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	e010      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b80      	cmp	r3, #128	; 0x80
 800277a:	d902      	bls.n	8002782 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800277c:	2303      	movs	r3, #3
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	e00a      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b80      	cmp	r3, #128	; 0x80
 8002786:	d102      	bne.n	800278e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002788:	2302      	movs	r3, #2
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	e004      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b70      	cmp	r3, #112	; 0x70
 8002792:	d101      	bne.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002794:	2301      	movs	r3, #1
 8002796:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 0207 	bic.w	r2, r3, #7
 80027a0:	4909      	ldr	r1, [pc, #36]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40022000 	.word	0x40022000

080027cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027d4:	2300      	movs	r3, #0
 80027d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027d8:	2300      	movs	r3, #0
 80027da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d041      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027f0:	d02a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027f6:	d824      	bhi.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027fc:	d008      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002802:	d81e      	bhi.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800280c:	d010      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800280e:	e018      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002810:	4b86      	ldr	r3, [pc, #536]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a85      	ldr	r2, [pc, #532]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800281c:	e015      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3304      	adds	r3, #4
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fabb 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 800282a:	4603      	mov	r3, r0
 800282c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800282e:	e00c      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3320      	adds	r3, #32
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fba6 	bl	8002f88 <RCCEx_PLLSAI2_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002840:	e003      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	74fb      	strb	r3, [r7, #19]
      break;
 8002846:	e000      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002850:	4b76      	ldr	r3, [pc, #472]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800285e:	4973      	ldr	r1, [pc, #460]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002866:	e001      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d041      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800287c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002880:	d02a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002882:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002886:	d824      	bhi.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800288c:	d008      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800288e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002892:	d81e      	bhi.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800289c:	d010      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800289e:	e018      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028a0:	4b62      	ldr	r3, [pc, #392]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a61      	ldr	r2, [pc, #388]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028ac:	e015      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fa73 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028be:	e00c      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3320      	adds	r3, #32
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fb5e 	bl	8002f88 <RCCEx_PLLSAI2_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028d0:	e003      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	74fb      	strb	r3, [r7, #19]
      break;
 80028d6:	e000      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028da:	7cfb      	ldrb	r3, [r7, #19]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10b      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028e0:	4b52      	ldr	r3, [pc, #328]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ee:	494f      	ldr	r1, [pc, #316]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028f6:	e001      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80a0 	beq.w	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290a:	2300      	movs	r3, #0
 800290c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00d      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	4a40      	ldr	r2, [pc, #256]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292e:	6593      	str	r3, [r2, #88]	; 0x58
 8002930:	4b3e      	ldr	r3, [pc, #248]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293c:	2301      	movs	r3, #1
 800293e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002940:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a3a      	ldr	r2, [pc, #232]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800294c:	f7fe fdbc 	bl	80014c8 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002952:	e009      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7fe fdb8 	bl	80014c8 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d902      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	74fb      	strb	r3, [r7, #19]
        break;
 8002966:	e005      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002968:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d15c      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800297a:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002984:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01f      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	429a      	cmp	r2, r3
 8002996:	d019      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002998:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe fd77 	bl	80014c8 <HAL_GetTick>
 80029da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029dc:	e00b      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7fe fd73 	bl	80014c8 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d902      	bls.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	74fb      	strb	r3, [r7, #19]
            break;
 80029f4:	e006      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ec      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1a:	4904      	ldr	r1, [pc, #16]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a22:	e009      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	74bb      	strb	r3, [r7, #18]
 8002a28:	e006      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a38:	7c7b      	ldrb	r3, [r7, #17]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3e:	4b9e      	ldr	r3, [pc, #632]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	4a9d      	ldr	r2, [pc, #628]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a56:	4b98      	ldr	r3, [pc, #608]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5c:	f023 0203 	bic.w	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	4994      	ldr	r1, [pc, #592]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a78:	4b8f      	ldr	r3, [pc, #572]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 020c 	bic.w	r2, r3, #12
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	498c      	ldr	r1, [pc, #560]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a9a:	4b87      	ldr	r3, [pc, #540]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	4983      	ldr	r1, [pc, #524]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002abc:	4b7e      	ldr	r3, [pc, #504]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	497b      	ldr	r1, [pc, #492]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ade:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aec:	4972      	ldr	r1, [pc, #456]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b00:	4b6d      	ldr	r3, [pc, #436]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	496a      	ldr	r1, [pc, #424]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b22:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	4961      	ldr	r1, [pc, #388]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b44:	4b5c      	ldr	r3, [pc, #368]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	4959      	ldr	r1, [pc, #356]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b66:	4b54      	ldr	r3, [pc, #336]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b74:	4950      	ldr	r1, [pc, #320]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b88:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	4948      	ldr	r1, [pc, #288]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002baa:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	493f      	ldr	r1, [pc, #252]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d028      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bcc:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bda:	4937      	ldr	r1, [pc, #220]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bea:	d106      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a31      	ldr	r2, [pc, #196]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf6:	60d3      	str	r3, [r2, #12]
 8002bf8:	e011      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c02:	d10c      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	2101      	movs	r1, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f8c8 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c14:	7cfb      	ldrb	r3, [r7, #19]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d028      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	491f      	ldr	r1, [pc, #124]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c48:	d106      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c54:	60d3      	str	r3, [r2, #12]
 8002c56:	e011      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2101      	movs	r1, #1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 f899 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d02b      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c96:	4908      	ldr	r1, [pc, #32]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca6:	d109      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a02      	ldr	r2, [pc, #8]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb2:	60d3      	str	r3, [r2, #12]
 8002cb4:	e014      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 f867 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cd6:	7cfb      	ldrb	r3, [r7, #19]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cdc:	7cfb      	ldrb	r3, [r7, #19]
 8002cde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d02f      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfa:	4928      	ldr	r1, [pc, #160]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d0a:	d10d      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	2102      	movs	r1, #2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f844 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d014      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d22:	7cfb      	ldrb	r3, [r7, #19]
 8002d24:	74bb      	strb	r3, [r7, #18]
 8002d26:	e011      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3320      	adds	r3, #32
 8002d36:	2102      	movs	r1, #2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 f925 	bl	8002f88 <RCCEx_PLLSAI2_Config>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d58:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d66:	490d      	ldr	r1, [pc, #52]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8a:	4904      	ldr	r1, [pc, #16]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d92:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000

08002da0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dae:	4b75      	ldr	r3, [pc, #468]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d018      	beq.n	8002dec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dba:	4b72      	ldr	r3, [pc, #456]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f003 0203 	and.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d10d      	bne.n	8002de6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
       ||
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dd2:	4b6c      	ldr	r3, [pc, #432]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
       ||
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d047      	beq.n	8002e76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	e044      	b.n	8002e76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d018      	beq.n	8002e26 <RCCEx_PLLSAI1_Config+0x86>
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d825      	bhi.n	8002e44 <RCCEx_PLLSAI1_Config+0xa4>
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d002      	beq.n	8002e02 <RCCEx_PLLSAI1_Config+0x62>
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d009      	beq.n	8002e14 <RCCEx_PLLSAI1_Config+0x74>
 8002e00:	e020      	b.n	8002e44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e02:	4b60      	ldr	r3, [pc, #384]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11d      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e12:	e01a      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e14:	4b5b      	ldr	r3, [pc, #364]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d116      	bne.n	8002e4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e24:	e013      	b.n	8002e4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e26:	4b57      	ldr	r3, [pc, #348]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10f      	bne.n	8002e52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e32:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e42:	e006      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
      break;
 8002e48:	e004      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e002      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e000      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e5a:	4b4a      	ldr	r3, [pc, #296]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	4944      	ldr	r1, [pc, #272]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d17d      	bne.n	8002f78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e7c:	4b41      	ldr	r3, [pc, #260]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a40      	ldr	r2, [pc, #256]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e88:	f7fe fb1e 	bl	80014c8 <HAL_GetTick>
 8002e8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e8e:	e009      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e90:	f7fe fb1a 	bl	80014c8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d902      	bls.n	8002ea4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ea2:	e005      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ea4:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1ef      	bne.n	8002e90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d160      	bne.n	8002f78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d111      	bne.n	8002ee0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ebc:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6892      	ldr	r2, [r2, #8]
 8002ecc:	0211      	lsls	r1, r2, #8
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68d2      	ldr	r2, [r2, #12]
 8002ed2:	0912      	lsrs	r2, r2, #4
 8002ed4:	0452      	lsls	r2, r2, #17
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	492a      	ldr	r1, [pc, #168]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	610b      	str	r3, [r1, #16]
 8002ede:	e027      	b.n	8002f30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d112      	bne.n	8002f0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ee6:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002eee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6892      	ldr	r2, [r2, #8]
 8002ef6:	0211      	lsls	r1, r2, #8
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6912      	ldr	r2, [r2, #16]
 8002efc:	0852      	lsrs	r2, r2, #1
 8002efe:	3a01      	subs	r2, #1
 8002f00:	0552      	lsls	r2, r2, #21
 8002f02:	430a      	orrs	r2, r1
 8002f04:	491f      	ldr	r1, [pc, #124]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	610b      	str	r3, [r1, #16]
 8002f0a:	e011      	b.n	8002f30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6892      	ldr	r2, [r2, #8]
 8002f1c:	0211      	lsls	r1, r2, #8
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6952      	ldr	r2, [r2, #20]
 8002f22:	0852      	lsrs	r2, r2, #1
 8002f24:	3a01      	subs	r2, #1
 8002f26:	0652      	lsls	r2, r2, #25
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	4916      	ldr	r1, [pc, #88]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fac4 	bl	80014c8 <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f42:	e009      	b.n	8002f58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f44:	f7fe fac0 	bl	80014c8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d902      	bls.n	8002f58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	73fb      	strb	r3, [r7, #15]
          break;
 8002f56:	e005      	b.n	8002f64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ef      	beq.n	8002f44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	4904      	ldr	r1, [pc, #16]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000

08002f88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f96:	4b6a      	ldr	r3, [pc, #424]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d018      	beq.n	8002fd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fa2:	4b67      	ldr	r3, [pc, #412]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0203 	and.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d10d      	bne.n	8002fce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fba:	4b61      	ldr	r3, [pc, #388]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d047      	beq.n	800305e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	e044      	b.n	800305e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d018      	beq.n	800300e <RCCEx_PLLSAI2_Config+0x86>
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d825      	bhi.n	800302c <RCCEx_PLLSAI2_Config+0xa4>
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d002      	beq.n	8002fea <RCCEx_PLLSAI2_Config+0x62>
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d009      	beq.n	8002ffc <RCCEx_PLLSAI2_Config+0x74>
 8002fe8:	e020      	b.n	800302c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fea:	4b55      	ldr	r3, [pc, #340]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11d      	bne.n	8003032 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffa:	e01a      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ffc:	4b50      	ldr	r3, [pc, #320]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d116      	bne.n	8003036 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300c:	e013      	b.n	8003036 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800300e:	4b4c      	ldr	r3, [pc, #304]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800301a:	4b49      	ldr	r3, [pc, #292]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800302a:	e006      	b.n	800303a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
      break;
 8003030:	e004      	b.n	800303c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800303a:	bf00      	nop
    }

    if(status == HAL_OK)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003042:	4b3f      	ldr	r3, [pc, #252]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6819      	ldr	r1, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	430b      	orrs	r3, r1
 8003058:	4939      	ldr	r1, [pc, #228]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305a:	4313      	orrs	r3, r2
 800305c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d167      	bne.n	8003134 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a35      	ldr	r2, [pc, #212]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003070:	f7fe fa2a 	bl	80014c8 <HAL_GetTick>
 8003074:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003076:	e009      	b.n	800308c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003078:	f7fe fa26 	bl	80014c8 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d902      	bls.n	800308c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	73fb      	strb	r3, [r7, #15]
        break;
 800308a:	e005      	b.n	8003098 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800308c:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ef      	bne.n	8003078 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d14a      	bne.n	8003134 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d111      	bne.n	80030c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030a4:	4b26      	ldr	r3, [pc, #152]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6892      	ldr	r2, [r2, #8]
 80030b4:	0211      	lsls	r1, r2, #8
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68d2      	ldr	r2, [r2, #12]
 80030ba:	0912      	lsrs	r2, r2, #4
 80030bc:	0452      	lsls	r2, r2, #17
 80030be:	430a      	orrs	r2, r1
 80030c0:	491f      	ldr	r1, [pc, #124]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	614b      	str	r3, [r1, #20]
 80030c6:	e011      	b.n	80030ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030c8:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6892      	ldr	r2, [r2, #8]
 80030d8:	0211      	lsls	r1, r2, #8
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6912      	ldr	r2, [r2, #16]
 80030de:	0852      	lsrs	r2, r2, #1
 80030e0:	3a01      	subs	r2, #1
 80030e2:	0652      	lsls	r2, r2, #25
 80030e4:	430a      	orrs	r2, r1
 80030e6:	4916      	ldr	r1, [pc, #88]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a13      	ldr	r2, [pc, #76]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f8:	f7fe f9e6 	bl	80014c8 <HAL_GetTick>
 80030fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030fe:	e009      	b.n	8003114 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003100:	f7fe f9e2 	bl	80014c8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d902      	bls.n	8003114 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	73fb      	strb	r3, [r7, #15]
          break;
 8003112:	e005      	b.n	8003120 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0ef      	beq.n	8003100 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4904      	ldr	r1, [pc, #16]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003130:	4313      	orrs	r3, r2
 8003132:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000

08003144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e049      	b.n	80031ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fd ff8c 	bl	8001088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	4619      	mov	r1, r3
 8003182:	4610      	mov	r0, r2
 8003184:	f000 f9ee 	bl	8003564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d001      	beq.n	800320c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e04f      	b.n	80032ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a23      	ldr	r2, [pc, #140]	; (80032b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01d      	beq.n	800326a <HAL_TIM_Base_Start_IT+0x76>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003236:	d018      	beq.n	800326a <HAL_TIM_Base_Start_IT+0x76>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <HAL_TIM_Base_Start_IT+0xc8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <HAL_TIM_Base_Start_IT+0x76>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00e      	beq.n	800326a <HAL_TIM_Base_Start_IT+0x76>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d009      	beq.n	800326a <HAL_TIM_Base_Start_IT+0x76>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d004      	beq.n	800326a <HAL_TIM_Base_Start_IT+0x76>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a19      	ldr	r2, [pc, #100]	; (80032cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d115      	bne.n	8003296 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003272:	4013      	ands	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b06      	cmp	r3, #6
 800327a:	d015      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0xb4>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003282:	d011      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003294:	e008      	b.n	80032a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e000      	b.n	80032aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40000800 	.word	0x40000800
 80032c4:	40000c00 	.word	0x40000c00
 80032c8:	40013400 	.word	0x40013400
 80032cc:	40014000 	.word	0x40014000
 80032d0:	00010007 	.word	0x00010007

080032d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d122      	bne.n	8003330 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d11b      	bne.n	8003330 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0202 	mvn.w	r2, #2
 8003300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f905 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 800331c:	e005      	b.n	800332a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f8f7 	bl	8003512 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f908 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d122      	bne.n	8003384 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b04      	cmp	r3, #4
 800334a:	d11b      	bne.n	8003384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0204 	mvn.w	r2, #4
 8003354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8db 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f8cd 	bl	8003512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f8de 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b08      	cmp	r3, #8
 8003390:	d122      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b08      	cmp	r3, #8
 800339e:	d11b      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0208 	mvn.w	r2, #8
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2204      	movs	r2, #4
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8b1 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8a3 	bl	8003512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f8b4 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d122      	bne.n	800342c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0210 	mvn.w	r2, #16
 80033fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2208      	movs	r2, #8
 8003402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f887 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f879 	bl	8003512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f88a 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d10e      	bne.n	8003458 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d107      	bne.n	8003458 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0201 	mvn.w	r2, #1
 8003450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd fd88 	bl	8000f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b80      	cmp	r3, #128	; 0x80
 8003464:	d10e      	bne.n	8003484 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b80      	cmp	r3, #128	; 0x80
 8003472:	d107      	bne.n	8003484 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800347c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f99c 	bl	80037bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003492:	d10e      	bne.n	80034b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	2b80      	cmp	r3, #128	; 0x80
 80034a0:	d107      	bne.n	80034b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f98f 	bl	80037d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d10e      	bne.n	80034de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	2b40      	cmp	r3, #64	; 0x40
 80034cc:	d107      	bne.n	80034de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f838 	bl	800354e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d10e      	bne.n	800350a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d107      	bne.n	800350a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f06f 0220 	mvn.w	r2, #32
 8003502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f94f 	bl	80037a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a40      	ldr	r2, [pc, #256]	; (8003678 <TIM_Base_SetConfig+0x114>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d013      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d00f      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a3d      	ldr	r2, [pc, #244]	; (800367c <TIM_Base_SetConfig+0x118>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00b      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3c      	ldr	r2, [pc, #240]	; (8003680 <TIM_Base_SetConfig+0x11c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d007      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3b      	ldr	r2, [pc, #236]	; (8003684 <TIM_Base_SetConfig+0x120>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3a      	ldr	r2, [pc, #232]	; (8003688 <TIM_Base_SetConfig+0x124>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d108      	bne.n	80035b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a2f      	ldr	r2, [pc, #188]	; (8003678 <TIM_Base_SetConfig+0x114>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01f      	beq.n	80035fe <TIM_Base_SetConfig+0x9a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c4:	d01b      	beq.n	80035fe <TIM_Base_SetConfig+0x9a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2c      	ldr	r2, [pc, #176]	; (800367c <TIM_Base_SetConfig+0x118>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d017      	beq.n	80035fe <TIM_Base_SetConfig+0x9a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <TIM_Base_SetConfig+0x11c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <TIM_Base_SetConfig+0x9a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <TIM_Base_SetConfig+0x120>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00f      	beq.n	80035fe <TIM_Base_SetConfig+0x9a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a29      	ldr	r2, [pc, #164]	; (8003688 <TIM_Base_SetConfig+0x124>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00b      	beq.n	80035fe <TIM_Base_SetConfig+0x9a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a28      	ldr	r2, [pc, #160]	; (800368c <TIM_Base_SetConfig+0x128>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d007      	beq.n	80035fe <TIM_Base_SetConfig+0x9a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a27      	ldr	r2, [pc, #156]	; (8003690 <TIM_Base_SetConfig+0x12c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d003      	beq.n	80035fe <TIM_Base_SetConfig+0x9a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a26      	ldr	r2, [pc, #152]	; (8003694 <TIM_Base_SetConfig+0x130>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d108      	bne.n	8003610 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a10      	ldr	r2, [pc, #64]	; (8003678 <TIM_Base_SetConfig+0x114>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00f      	beq.n	800365c <TIM_Base_SetConfig+0xf8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a12      	ldr	r2, [pc, #72]	; (8003688 <TIM_Base_SetConfig+0x124>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00b      	beq.n	800365c <TIM_Base_SetConfig+0xf8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a11      	ldr	r2, [pc, #68]	; (800368c <TIM_Base_SetConfig+0x128>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d007      	beq.n	800365c <TIM_Base_SetConfig+0xf8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a10      	ldr	r2, [pc, #64]	; (8003690 <TIM_Base_SetConfig+0x12c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_Base_SetConfig+0xf8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a0f      	ldr	r2, [pc, #60]	; (8003694 <TIM_Base_SetConfig+0x130>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d103      	bne.n	8003664 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	615a      	str	r2, [r3, #20]
}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40012c00 	.word	0x40012c00
 800367c:	40000400 	.word	0x40000400
 8003680:	40000800 	.word	0x40000800
 8003684:	40000c00 	.word	0x40000c00
 8003688:	40013400 	.word	0x40013400
 800368c:	40014000 	.word	0x40014000
 8003690:	40014400 	.word	0x40014400
 8003694:	40014800 	.word	0x40014800

08003698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e068      	b.n	8003782 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2e      	ldr	r2, [pc, #184]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d108      	bne.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1e      	ldr	r2, [pc, #120]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01d      	beq.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003722:	d018      	beq.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1b      	ldr	r2, [pc, #108]	; (8003798 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1a      	ldr	r2, [pc, #104]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00e      	beq.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a13      	ldr	r2, [pc, #76]	; (8003794 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d10c      	bne.n	8003770 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800375c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	4313      	orrs	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40012c00 	.word	0x40012c00
 8003794:	40013400 	.word	0x40013400
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40014000 	.word	0x40014000

080037a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e040      	b.n	8003878 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd fc64 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2224      	movs	r2, #36	; 0x24
 8003810:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0201 	bic.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f992 	bl	8003b4c <UART_SetConfig>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e022      	b.n	8003878 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fc3e 	bl	80040bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800384e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800385e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fcc5 	bl	8004200 <UART_CheckIdleState>
 8003876:	4603      	mov	r3, r0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	4613      	mov	r3, r2
 800388e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003894:	2b20      	cmp	r3, #32
 8003896:	f040 8082 	bne.w	800399e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_UART_Transmit+0x26>
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e07a      	b.n	80039a0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_UART_Transmit+0x38>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e073      	b.n	80039a0 <HAL_UART_Transmit+0x120>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2221      	movs	r2, #33	; 0x21
 80038cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ce:	f7fd fdfb 	bl	80014c8 <HAL_GetTick>
 80038d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	88fa      	ldrh	r2, [r7, #6]
 80038d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ec:	d108      	bne.n	8003900 <HAL_UART_Transmit+0x80>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	61bb      	str	r3, [r7, #24]
 80038fe:	e003      	b.n	8003908 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003910:	e02d      	b.n	800396e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2200      	movs	r2, #0
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fcb8 	bl	8004292 <UART_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e039      	b.n	80039a0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10b      	bne.n	800394a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	881a      	ldrh	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800393e:	b292      	uxth	r2, r2
 8003940:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	3302      	adds	r3, #2
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	e008      	b.n	800395c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	b292      	uxth	r2, r2
 8003954:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3301      	adds	r3, #1
 800395a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1cb      	bne.n	8003912 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2200      	movs	r2, #0
 8003982:	2140      	movs	r1, #64	; 0x40
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fc84 	bl	8004292 <UART_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e005      	b.n	80039a0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800399e:	2302      	movs	r3, #2
  }
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	4613      	mov	r3, r2
 80039b6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039bc:	2b20      	cmp	r3, #32
 80039be:	f040 80bf 	bne.w	8003b40 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_UART_Receive+0x26>
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e0b7      	b.n	8003b42 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_UART_Receive+0x38>
 80039dc:	2302      	movs	r3, #2
 80039de:	e0b0      	b.n	8003b42 <HAL_UART_Receive+0x19a>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2222      	movs	r2, #34	; 0x22
 80039f4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039fc:	f7fd fd64 	bl	80014c8 <HAL_GetTick>
 8003a00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	88fa      	ldrh	r2, [r7, #6]
 8003a06:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1a:	d10e      	bne.n	8003a3a <HAL_UART_Receive+0x92>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d105      	bne.n	8003a30 <HAL_UART_Receive+0x88>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a2e:	e02d      	b.n	8003a8c <HAL_UART_Receive+0xe4>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	22ff      	movs	r2, #255	; 0xff
 8003a34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a38:	e028      	b.n	8003a8c <HAL_UART_Receive+0xe4>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10d      	bne.n	8003a5e <HAL_UART_Receive+0xb6>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <HAL_UART_Receive+0xac>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	22ff      	movs	r2, #255	; 0xff
 8003a4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a52:	e01b      	b.n	8003a8c <HAL_UART_Receive+0xe4>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	227f      	movs	r2, #127	; 0x7f
 8003a58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a5c:	e016      	b.n	8003a8c <HAL_UART_Receive+0xe4>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a66:	d10d      	bne.n	8003a84 <HAL_UART_Receive+0xdc>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <HAL_UART_Receive+0xd2>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	227f      	movs	r2, #127	; 0x7f
 8003a74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a78:	e008      	b.n	8003a8c <HAL_UART_Receive+0xe4>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	223f      	movs	r2, #63	; 0x3f
 8003a7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a82:	e003      	b.n	8003a8c <HAL_UART_Receive+0xe4>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a92:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9c:	d108      	bne.n	8003ab0 <HAL_UART_Receive+0x108>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d104      	bne.n	8003ab0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	e003      	b.n	8003ab8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ac0:	e033      	b.n	8003b2a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2120      	movs	r1, #32
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fbe0 	bl	8004292 <UART_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e032      	b.n	8003b42 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10c      	bne.n	8003afc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	8a7b      	ldrh	r3, [r7, #18]
 8003aec:	4013      	ands	r3, r2
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	3302      	adds	r3, #2
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	e00d      	b.n	8003b18 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	8a7b      	ldrh	r3, [r7, #18]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3301      	adds	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1c5      	bne.n	8003ac2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e000      	b.n	8003b42 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003b40:	2302      	movs	r3, #2
  }
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3720      	adds	r7, #32
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b50:	b08a      	sub	sp, #40	; 0x28
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4ba4      	ldr	r3, [pc, #656]	; (8003e0c <UART_SetConfig+0x2c0>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b84:	430b      	orrs	r3, r1
 8003b86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a99      	ldr	r2, [pc, #612]	; (8003e10 <UART_SetConfig+0x2c4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a90      	ldr	r2, [pc, #576]	; (8003e14 <UART_SetConfig+0x2c8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d126      	bne.n	8003c24 <UART_SetConfig+0xd8>
 8003bd6:	4b90      	ldr	r3, [pc, #576]	; (8003e18 <UART_SetConfig+0x2cc>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d81b      	bhi.n	8003c1c <UART_SetConfig+0xd0>
 8003be4:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <UART_SetConfig+0xa0>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003bfd 	.word	0x08003bfd
 8003bf0:	08003c0d 	.word	0x08003c0d
 8003bf4:	08003c05 	.word	0x08003c05
 8003bf8:	08003c15 	.word	0x08003c15
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c02:	e116      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003c04:	2302      	movs	r3, #2
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0a:	e112      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c12:	e10e      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003c14:	2308      	movs	r3, #8
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1a:	e10a      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c22:	e106      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a7c      	ldr	r2, [pc, #496]	; (8003e1c <UART_SetConfig+0x2d0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d138      	bne.n	8003ca0 <UART_SetConfig+0x154>
 8003c2e:	4b7a      	ldr	r3, [pc, #488]	; (8003e18 <UART_SetConfig+0x2cc>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	d82d      	bhi.n	8003c98 <UART_SetConfig+0x14c>
 8003c3c:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <UART_SetConfig+0xf8>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003c79 	.word	0x08003c79
 8003c48:	08003c99 	.word	0x08003c99
 8003c4c:	08003c99 	.word	0x08003c99
 8003c50:	08003c99 	.word	0x08003c99
 8003c54:	08003c89 	.word	0x08003c89
 8003c58:	08003c99 	.word	0x08003c99
 8003c5c:	08003c99 	.word	0x08003c99
 8003c60:	08003c99 	.word	0x08003c99
 8003c64:	08003c81 	.word	0x08003c81
 8003c68:	08003c99 	.word	0x08003c99
 8003c6c:	08003c99 	.word	0x08003c99
 8003c70:	08003c99 	.word	0x08003c99
 8003c74:	08003c91 	.word	0x08003c91
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7e:	e0d8      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003c80:	2302      	movs	r3, #2
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c86:	e0d4      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8e:	e0d0      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003c90:	2308      	movs	r3, #8
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c96:	e0cc      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9e:	e0c8      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a5e      	ldr	r2, [pc, #376]	; (8003e20 <UART_SetConfig+0x2d4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d125      	bne.n	8003cf6 <UART_SetConfig+0x1aa>
 8003caa:	4b5b      	ldr	r3, [pc, #364]	; (8003e18 <UART_SetConfig+0x2cc>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cb4:	2b30      	cmp	r3, #48	; 0x30
 8003cb6:	d016      	beq.n	8003ce6 <UART_SetConfig+0x19a>
 8003cb8:	2b30      	cmp	r3, #48	; 0x30
 8003cba:	d818      	bhi.n	8003cee <UART_SetConfig+0x1a2>
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d00a      	beq.n	8003cd6 <UART_SetConfig+0x18a>
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d814      	bhi.n	8003cee <UART_SetConfig+0x1a2>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <UART_SetConfig+0x182>
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d008      	beq.n	8003cde <UART_SetConfig+0x192>
 8003ccc:	e00f      	b.n	8003cee <UART_SetConfig+0x1a2>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd4:	e0ad      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cdc:	e0a9      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003cde:	2304      	movs	r3, #4
 8003ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce4:	e0a5      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cec:	e0a1      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003cee:	2310      	movs	r3, #16
 8003cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf4:	e09d      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4a      	ldr	r2, [pc, #296]	; (8003e24 <UART_SetConfig+0x2d8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d125      	bne.n	8003d4c <UART_SetConfig+0x200>
 8003d00:	4b45      	ldr	r3, [pc, #276]	; (8003e18 <UART_SetConfig+0x2cc>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d0c:	d016      	beq.n	8003d3c <UART_SetConfig+0x1f0>
 8003d0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d10:	d818      	bhi.n	8003d44 <UART_SetConfig+0x1f8>
 8003d12:	2b80      	cmp	r3, #128	; 0x80
 8003d14:	d00a      	beq.n	8003d2c <UART_SetConfig+0x1e0>
 8003d16:	2b80      	cmp	r3, #128	; 0x80
 8003d18:	d814      	bhi.n	8003d44 <UART_SetConfig+0x1f8>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <UART_SetConfig+0x1d8>
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d008      	beq.n	8003d34 <UART_SetConfig+0x1e8>
 8003d22:	e00f      	b.n	8003d44 <UART_SetConfig+0x1f8>
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2a:	e082      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d32:	e07e      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003d34:	2304      	movs	r3, #4
 8003d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3a:	e07a      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d42:	e076      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003d44:	2310      	movs	r3, #16
 8003d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4a:	e072      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a35      	ldr	r2, [pc, #212]	; (8003e28 <UART_SetConfig+0x2dc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d12a      	bne.n	8003dac <UART_SetConfig+0x260>
 8003d56:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <UART_SetConfig+0x2cc>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d64:	d01a      	beq.n	8003d9c <UART_SetConfig+0x250>
 8003d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d6a:	d81b      	bhi.n	8003da4 <UART_SetConfig+0x258>
 8003d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d70:	d00c      	beq.n	8003d8c <UART_SetConfig+0x240>
 8003d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d76:	d815      	bhi.n	8003da4 <UART_SetConfig+0x258>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <UART_SetConfig+0x238>
 8003d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d80:	d008      	beq.n	8003d94 <UART_SetConfig+0x248>
 8003d82:	e00f      	b.n	8003da4 <UART_SetConfig+0x258>
 8003d84:	2300      	movs	r3, #0
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8a:	e052      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	e04e      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003d94:	2304      	movs	r3, #4
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9a:	e04a      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da2:	e046      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003da4:	2310      	movs	r3, #16
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003daa:	e042      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <UART_SetConfig+0x2c4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d13a      	bne.n	8003e2c <UART_SetConfig+0x2e0>
 8003db6:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <UART_SetConfig+0x2cc>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc4:	d01a      	beq.n	8003dfc <UART_SetConfig+0x2b0>
 8003dc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dca:	d81b      	bhi.n	8003e04 <UART_SetConfig+0x2b8>
 8003dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd0:	d00c      	beq.n	8003dec <UART_SetConfig+0x2a0>
 8003dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd6:	d815      	bhi.n	8003e04 <UART_SetConfig+0x2b8>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <UART_SetConfig+0x298>
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d008      	beq.n	8003df4 <UART_SetConfig+0x2a8>
 8003de2:	e00f      	b.n	8003e04 <UART_SetConfig+0x2b8>
 8003de4:	2300      	movs	r3, #0
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dea:	e022      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003dec:	2302      	movs	r3, #2
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df2:	e01e      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003df4:	2304      	movs	r3, #4
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfa:	e01a      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e02:	e016      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003e04:	2310      	movs	r3, #16
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e0a:	e012      	b.n	8003e32 <UART_SetConfig+0x2e6>
 8003e0c:	efff69f3 	.word	0xefff69f3
 8003e10:	40008000 	.word	0x40008000
 8003e14:	40013800 	.word	0x40013800
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	40004400 	.word	0x40004400
 8003e20:	40004800 	.word	0x40004800
 8003e24:	40004c00 	.word	0x40004c00
 8003e28:	40005000 	.word	0x40005000
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a9f      	ldr	r2, [pc, #636]	; (80040b4 <UART_SetConfig+0x568>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d17a      	bne.n	8003f32 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d824      	bhi.n	8003e8e <UART_SetConfig+0x342>
 8003e44:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <UART_SetConfig+0x300>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e71 	.word	0x08003e71
 8003e50:	08003e8f 	.word	0x08003e8f
 8003e54:	08003e79 	.word	0x08003e79
 8003e58:	08003e8f 	.word	0x08003e8f
 8003e5c:	08003e7f 	.word	0x08003e7f
 8003e60:	08003e8f 	.word	0x08003e8f
 8003e64:	08003e8f 	.word	0x08003e8f
 8003e68:	08003e8f 	.word	0x08003e8f
 8003e6c:	08003e87 	.word	0x08003e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e70:	f7fe fc20 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8003e74:	61f8      	str	r0, [r7, #28]
        break;
 8003e76:	e010      	b.n	8003e9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e78:	4b8f      	ldr	r3, [pc, #572]	; (80040b8 <UART_SetConfig+0x56c>)
 8003e7a:	61fb      	str	r3, [r7, #28]
        break;
 8003e7c:	e00d      	b.n	8003e9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7e:	f7fe fb81 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8003e82:	61f8      	str	r0, [r7, #28]
        break;
 8003e84:	e009      	b.n	8003e9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8a:	61fb      	str	r3, [r7, #28]
        break;
 8003e8c:	e005      	b.n	8003e9a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80fb 	beq.w	8004098 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	4413      	add	r3, r2
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d305      	bcc.n	8003ebe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d903      	bls.n	8003ec6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ec4:	e0e8      	b.n	8004098 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	461c      	mov	r4, r3
 8003ecc:	4615      	mov	r5, r2
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	022b      	lsls	r3, r5, #8
 8003ed8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003edc:	0222      	lsls	r2, r4, #8
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	6849      	ldr	r1, [r1, #4]
 8003ee2:	0849      	lsrs	r1, r1, #1
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	4688      	mov	r8, r1
 8003ee8:	4681      	mov	r9, r0
 8003eea:	eb12 0a08 	adds.w	sl, r2, r8
 8003eee:	eb43 0b09 	adc.w	fp, r3, r9
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	603b      	str	r3, [r7, #0]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f00:	4650      	mov	r0, sl
 8003f02:	4659      	mov	r1, fp
 8003f04:	f7fc f9cc 	bl	80002a0 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f16:	d308      	bcc.n	8003f2a <UART_SetConfig+0x3de>
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f1e:	d204      	bcs.n	8003f2a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	60da      	str	r2, [r3, #12]
 8003f28:	e0b6      	b.n	8004098 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f30:	e0b2      	b.n	8004098 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3a:	d15e      	bne.n	8003ffa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d828      	bhi.n	8003f96 <UART_SetConfig+0x44a>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <UART_SetConfig+0x400>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f71 	.word	0x08003f71
 8003f50:	08003f79 	.word	0x08003f79
 8003f54:	08003f81 	.word	0x08003f81
 8003f58:	08003f97 	.word	0x08003f97
 8003f5c:	08003f87 	.word	0x08003f87
 8003f60:	08003f97 	.word	0x08003f97
 8003f64:	08003f97 	.word	0x08003f97
 8003f68:	08003f97 	.word	0x08003f97
 8003f6c:	08003f8f 	.word	0x08003f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f70:	f7fe fba0 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8003f74:	61f8      	str	r0, [r7, #28]
        break;
 8003f76:	e014      	b.n	8003fa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f78:	f7fe fbb2 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 8003f7c:	61f8      	str	r0, [r7, #28]
        break;
 8003f7e:	e010      	b.n	8003fa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f80:	4b4d      	ldr	r3, [pc, #308]	; (80040b8 <UART_SetConfig+0x56c>)
 8003f82:	61fb      	str	r3, [r7, #28]
        break;
 8003f84:	e00d      	b.n	8003fa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f86:	f7fe fafd 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8003f8a:	61f8      	str	r0, [r7, #28]
        break;
 8003f8c:	e009      	b.n	8003fa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f92:	61fb      	str	r3, [r7, #28]
        break;
 8003f94:	e005      	b.n	8003fa2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d077      	beq.n	8004098 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	005a      	lsls	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	441a      	add	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b0f      	cmp	r3, #15
 8003fc2:	d916      	bls.n	8003ff2 <UART_SetConfig+0x4a6>
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fca:	d212      	bcs.n	8003ff2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f023 030f 	bic.w	r3, r3, #15
 8003fd4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	085b      	lsrs	r3, r3, #1
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	8afb      	ldrh	r3, [r7, #22]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	8afa      	ldrh	r2, [r7, #22]
 8003fee:	60da      	str	r2, [r3, #12]
 8003ff0:	e052      	b.n	8004098 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ff8:	e04e      	b.n	8004098 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ffa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d827      	bhi.n	8004052 <UART_SetConfig+0x506>
 8004002:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <UART_SetConfig+0x4bc>)
 8004004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004008:	0800402d 	.word	0x0800402d
 800400c:	08004035 	.word	0x08004035
 8004010:	0800403d 	.word	0x0800403d
 8004014:	08004053 	.word	0x08004053
 8004018:	08004043 	.word	0x08004043
 800401c:	08004053 	.word	0x08004053
 8004020:	08004053 	.word	0x08004053
 8004024:	08004053 	.word	0x08004053
 8004028:	0800404b 	.word	0x0800404b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800402c:	f7fe fb42 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8004030:	61f8      	str	r0, [r7, #28]
        break;
 8004032:	e014      	b.n	800405e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004034:	f7fe fb54 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 8004038:	61f8      	str	r0, [r7, #28]
        break;
 800403a:	e010      	b.n	800405e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800403c:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <UART_SetConfig+0x56c>)
 800403e:	61fb      	str	r3, [r7, #28]
        break;
 8004040:	e00d      	b.n	800405e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004042:	f7fe fa9f 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8004046:	61f8      	str	r0, [r7, #28]
        break;
 8004048:	e009      	b.n	800405e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800404a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404e:	61fb      	str	r3, [r7, #28]
        break;
 8004050:	e005      	b.n	800405e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800405c:	bf00      	nop
    }

    if (pclk != 0U)
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d019      	beq.n	8004098 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	085a      	lsrs	r2, r3, #1
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	441a      	add	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b0f      	cmp	r3, #15
 800407c:	d909      	bls.n	8004092 <UART_SetConfig+0x546>
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004084:	d205      	bcs.n	8004092 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60da      	str	r2, [r3, #12]
 8004090:	e002      	b.n	8004098 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80040a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3728      	adds	r7, #40	; 0x28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040b2:	bf00      	nop
 80040b4:	40008000 	.word	0x40008000
 80040b8:	00f42400 	.word	0x00f42400

080040bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01a      	beq.n	80041d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ba:	d10a      	bne.n	80041d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]
  }
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af02      	add	r7, sp, #8
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004210:	f7fd f95a 	bl	80014c8 <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b08      	cmp	r3, #8
 8004222:	d10e      	bne.n	8004242 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f82d 	bl	8004292 <UART_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e023      	b.n	800428a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d10e      	bne.n	800426e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f817 	bl	8004292 <UART_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e00d      	b.n	800428a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b09c      	sub	sp, #112	; 0x70
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	4613      	mov	r3, r2
 80042a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a2:	e0a5      	b.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	f000 80a1 	beq.w	80043f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fd f90b 	bl	80014c8 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80042be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d13e      	bne.n	8004342 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042d8:	667b      	str	r3, [r7, #100]	; 0x64
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e6      	bne.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3308      	adds	r3, #8
 80042fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	663b      	str	r3, [r7, #96]	; 0x60
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3308      	adds	r3, #8
 8004314:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004316:	64ba      	str	r2, [r7, #72]	; 0x48
 8004318:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800431c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e5      	bne.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e067      	b.n	8004412 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d04f      	beq.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800435a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435e:	d147      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004368:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800437e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004388:	637b      	str	r3, [r7, #52]	; 0x34
 800438a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800438e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e6      	bne.n	800436a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3308      	adds	r3, #8
 80043a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	613b      	str	r3, [r7, #16]
   return(result);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3308      	adds	r3, #8
 80043ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043bc:	623a      	str	r2, [r7, #32]
 80043be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	69f9      	ldr	r1, [r7, #28]
 80043c2:	6a3a      	ldr	r2, [r7, #32]
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e5      	bne.n	800439c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e010      	b.n	8004412 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4013      	ands	r3, r2
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	429a      	cmp	r2, r3
 800440c:	f43f af4a 	beq.w	80042a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3770      	adds	r7, #112	; 0x70
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <_ZdlPvj>:
 800441a:	f000 b814 	b.w	8004446 <_ZdlPv>

0800441e <_Znwj>:
 800441e:	2801      	cmp	r0, #1
 8004420:	bf38      	it	cc
 8004422:	2001      	movcc	r0, #1
 8004424:	b510      	push	{r4, lr}
 8004426:	4604      	mov	r4, r0
 8004428:	4620      	mov	r0, r4
 800442a:	f000 f85f 	bl	80044ec <malloc>
 800442e:	b930      	cbnz	r0, 800443e <_Znwj+0x20>
 8004430:	f000 f81e 	bl	8004470 <_ZSt15get_new_handlerv>
 8004434:	b908      	cbnz	r0, 800443a <_Znwj+0x1c>
 8004436:	f000 f823 	bl	8004480 <abort>
 800443a:	4780      	blx	r0
 800443c:	e7f4      	b.n	8004428 <_Znwj+0xa>
 800443e:	bd10      	pop	{r4, pc}

08004440 <__cxa_pure_virtual>:
 8004440:	b508      	push	{r3, lr}
 8004442:	f000 f80f 	bl	8004464 <_ZSt9terminatev>

08004446 <_ZdlPv>:
 8004446:	f000 b859 	b.w	80044fc <free>

0800444a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800444a:	b508      	push	{r3, lr}
 800444c:	4780      	blx	r0
 800444e:	f000 f817 	bl	8004480 <abort>
	...

08004454 <_ZSt13get_terminatev>:
 8004454:	4b02      	ldr	r3, [pc, #8]	; (8004460 <_ZSt13get_terminatev+0xc>)
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	f3bf 8f5b 	dmb	ish
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	2000000c 	.word	0x2000000c

08004464 <_ZSt9terminatev>:
 8004464:	b508      	push	{r3, lr}
 8004466:	f7ff fff5 	bl	8004454 <_ZSt13get_terminatev>
 800446a:	f7ff ffee 	bl	800444a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08004470 <_ZSt15get_new_handlerv>:
 8004470:	4b02      	ldr	r3, [pc, #8]	; (800447c <_ZSt15get_new_handlerv+0xc>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	f3bf 8f5b 	dmb	ish
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000374 	.word	0x20000374

08004480 <abort>:
 8004480:	b508      	push	{r3, lr}
 8004482:	2006      	movs	r0, #6
 8004484:	f000 f9d8 	bl	8004838 <raise>
 8004488:	2001      	movs	r0, #1
 800448a:	f7fc fedf 	bl	800124c <_exit>

0800448e <atoi>:
 800448e:	220a      	movs	r2, #10
 8004490:	2100      	movs	r1, #0
 8004492:	f000 bae3 	b.w	8004a5c <strtol>
	...

08004498 <__errno>:
 8004498:	4b01      	ldr	r3, [pc, #4]	; (80044a0 <__errno+0x8>)
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	20000010 	.word	0x20000010

080044a4 <__libc_init_array>:
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	4d0d      	ldr	r5, [pc, #52]	; (80044dc <__libc_init_array+0x38>)
 80044a8:	4c0d      	ldr	r4, [pc, #52]	; (80044e0 <__libc_init_array+0x3c>)
 80044aa:	1b64      	subs	r4, r4, r5
 80044ac:	10a4      	asrs	r4, r4, #2
 80044ae:	2600      	movs	r6, #0
 80044b0:	42a6      	cmp	r6, r4
 80044b2:	d109      	bne.n	80044c8 <__libc_init_array+0x24>
 80044b4:	4d0b      	ldr	r5, [pc, #44]	; (80044e4 <__libc_init_array+0x40>)
 80044b6:	4c0c      	ldr	r4, [pc, #48]	; (80044e8 <__libc_init_array+0x44>)
 80044b8:	f001 fa7e 	bl	80059b8 <_init>
 80044bc:	1b64      	subs	r4, r4, r5
 80044be:	10a4      	asrs	r4, r4, #2
 80044c0:	2600      	movs	r6, #0
 80044c2:	42a6      	cmp	r6, r4
 80044c4:	d105      	bne.n	80044d2 <__libc_init_array+0x2e>
 80044c6:	bd70      	pop	{r4, r5, r6, pc}
 80044c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044cc:	4798      	blx	r3
 80044ce:	3601      	adds	r6, #1
 80044d0:	e7ee      	b.n	80044b0 <__libc_init_array+0xc>
 80044d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d6:	4798      	blx	r3
 80044d8:	3601      	adds	r6, #1
 80044da:	e7f2      	b.n	80044c2 <__libc_init_array+0x1e>
 80044dc:	08005c60 	.word	0x08005c60
 80044e0:	08005c60 	.word	0x08005c60
 80044e4:	08005c60 	.word	0x08005c60
 80044e8:	08005c68 	.word	0x08005c68

080044ec <malloc>:
 80044ec:	4b02      	ldr	r3, [pc, #8]	; (80044f8 <malloc+0xc>)
 80044ee:	4601      	mov	r1, r0
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	f000 b87f 	b.w	80045f4 <_malloc_r>
 80044f6:	bf00      	nop
 80044f8:	20000010 	.word	0x20000010

080044fc <free>:
 80044fc:	4b02      	ldr	r3, [pc, #8]	; (8004508 <free+0xc>)
 80044fe:	4601      	mov	r1, r0
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	f000 b80b 	b.w	800451c <_free_r>
 8004506:	bf00      	nop
 8004508:	20000010 	.word	0x20000010

0800450c <memset>:
 800450c:	4402      	add	r2, r0
 800450e:	4603      	mov	r3, r0
 8004510:	4293      	cmp	r3, r2
 8004512:	d100      	bne.n	8004516 <memset+0xa>
 8004514:	4770      	bx	lr
 8004516:	f803 1b01 	strb.w	r1, [r3], #1
 800451a:	e7f9      	b.n	8004510 <memset+0x4>

0800451c <_free_r>:
 800451c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800451e:	2900      	cmp	r1, #0
 8004520:	d044      	beq.n	80045ac <_free_r+0x90>
 8004522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004526:	9001      	str	r0, [sp, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f1a1 0404 	sub.w	r4, r1, #4
 800452e:	bfb8      	it	lt
 8004530:	18e4      	addlt	r4, r4, r3
 8004532:	f000 fdb1 	bl	8005098 <__malloc_lock>
 8004536:	4a1e      	ldr	r2, [pc, #120]	; (80045b0 <_free_r+0x94>)
 8004538:	9801      	ldr	r0, [sp, #4]
 800453a:	6813      	ldr	r3, [r2, #0]
 800453c:	b933      	cbnz	r3, 800454c <_free_r+0x30>
 800453e:	6063      	str	r3, [r4, #4]
 8004540:	6014      	str	r4, [r2, #0]
 8004542:	b003      	add	sp, #12
 8004544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004548:	f000 bdac 	b.w	80050a4 <__malloc_unlock>
 800454c:	42a3      	cmp	r3, r4
 800454e:	d908      	bls.n	8004562 <_free_r+0x46>
 8004550:	6825      	ldr	r5, [r4, #0]
 8004552:	1961      	adds	r1, r4, r5
 8004554:	428b      	cmp	r3, r1
 8004556:	bf01      	itttt	eq
 8004558:	6819      	ldreq	r1, [r3, #0]
 800455a:	685b      	ldreq	r3, [r3, #4]
 800455c:	1949      	addeq	r1, r1, r5
 800455e:	6021      	streq	r1, [r4, #0]
 8004560:	e7ed      	b.n	800453e <_free_r+0x22>
 8004562:	461a      	mov	r2, r3
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	b10b      	cbz	r3, 800456c <_free_r+0x50>
 8004568:	42a3      	cmp	r3, r4
 800456a:	d9fa      	bls.n	8004562 <_free_r+0x46>
 800456c:	6811      	ldr	r1, [r2, #0]
 800456e:	1855      	adds	r5, r2, r1
 8004570:	42a5      	cmp	r5, r4
 8004572:	d10b      	bne.n	800458c <_free_r+0x70>
 8004574:	6824      	ldr	r4, [r4, #0]
 8004576:	4421      	add	r1, r4
 8004578:	1854      	adds	r4, r2, r1
 800457a:	42a3      	cmp	r3, r4
 800457c:	6011      	str	r1, [r2, #0]
 800457e:	d1e0      	bne.n	8004542 <_free_r+0x26>
 8004580:	681c      	ldr	r4, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	6053      	str	r3, [r2, #4]
 8004586:	4421      	add	r1, r4
 8004588:	6011      	str	r1, [r2, #0]
 800458a:	e7da      	b.n	8004542 <_free_r+0x26>
 800458c:	d902      	bls.n	8004594 <_free_r+0x78>
 800458e:	230c      	movs	r3, #12
 8004590:	6003      	str	r3, [r0, #0]
 8004592:	e7d6      	b.n	8004542 <_free_r+0x26>
 8004594:	6825      	ldr	r5, [r4, #0]
 8004596:	1961      	adds	r1, r4, r5
 8004598:	428b      	cmp	r3, r1
 800459a:	bf04      	itt	eq
 800459c:	6819      	ldreq	r1, [r3, #0]
 800459e:	685b      	ldreq	r3, [r3, #4]
 80045a0:	6063      	str	r3, [r4, #4]
 80045a2:	bf04      	itt	eq
 80045a4:	1949      	addeq	r1, r1, r5
 80045a6:	6021      	streq	r1, [r4, #0]
 80045a8:	6054      	str	r4, [r2, #4]
 80045aa:	e7ca      	b.n	8004542 <_free_r+0x26>
 80045ac:	b003      	add	sp, #12
 80045ae:	bd30      	pop	{r4, r5, pc}
 80045b0:	20000378 	.word	0x20000378

080045b4 <sbrk_aligned>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	4e0e      	ldr	r6, [pc, #56]	; (80045f0 <sbrk_aligned+0x3c>)
 80045b8:	460c      	mov	r4, r1
 80045ba:	6831      	ldr	r1, [r6, #0]
 80045bc:	4605      	mov	r5, r0
 80045be:	b911      	cbnz	r1, 80045c6 <sbrk_aligned+0x12>
 80045c0:	f000 f902 	bl	80047c8 <_sbrk_r>
 80045c4:	6030      	str	r0, [r6, #0]
 80045c6:	4621      	mov	r1, r4
 80045c8:	4628      	mov	r0, r5
 80045ca:	f000 f8fd 	bl	80047c8 <_sbrk_r>
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	d00a      	beq.n	80045e8 <sbrk_aligned+0x34>
 80045d2:	1cc4      	adds	r4, r0, #3
 80045d4:	f024 0403 	bic.w	r4, r4, #3
 80045d8:	42a0      	cmp	r0, r4
 80045da:	d007      	beq.n	80045ec <sbrk_aligned+0x38>
 80045dc:	1a21      	subs	r1, r4, r0
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 f8f2 	bl	80047c8 <_sbrk_r>
 80045e4:	3001      	adds	r0, #1
 80045e6:	d101      	bne.n	80045ec <sbrk_aligned+0x38>
 80045e8:	f04f 34ff 	mov.w	r4, #4294967295
 80045ec:	4620      	mov	r0, r4
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	2000037c 	.word	0x2000037c

080045f4 <_malloc_r>:
 80045f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f8:	1ccd      	adds	r5, r1, #3
 80045fa:	f025 0503 	bic.w	r5, r5, #3
 80045fe:	3508      	adds	r5, #8
 8004600:	2d0c      	cmp	r5, #12
 8004602:	bf38      	it	cc
 8004604:	250c      	movcc	r5, #12
 8004606:	2d00      	cmp	r5, #0
 8004608:	4607      	mov	r7, r0
 800460a:	db01      	blt.n	8004610 <_malloc_r+0x1c>
 800460c:	42a9      	cmp	r1, r5
 800460e:	d905      	bls.n	800461c <_malloc_r+0x28>
 8004610:	230c      	movs	r3, #12
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	2600      	movs	r6, #0
 8004616:	4630      	mov	r0, r6
 8004618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800461c:	4e2e      	ldr	r6, [pc, #184]	; (80046d8 <_malloc_r+0xe4>)
 800461e:	f000 fd3b 	bl	8005098 <__malloc_lock>
 8004622:	6833      	ldr	r3, [r6, #0]
 8004624:	461c      	mov	r4, r3
 8004626:	bb34      	cbnz	r4, 8004676 <_malloc_r+0x82>
 8004628:	4629      	mov	r1, r5
 800462a:	4638      	mov	r0, r7
 800462c:	f7ff ffc2 	bl	80045b4 <sbrk_aligned>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	4604      	mov	r4, r0
 8004634:	d14d      	bne.n	80046d2 <_malloc_r+0xde>
 8004636:	6834      	ldr	r4, [r6, #0]
 8004638:	4626      	mov	r6, r4
 800463a:	2e00      	cmp	r6, #0
 800463c:	d140      	bne.n	80046c0 <_malloc_r+0xcc>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	4631      	mov	r1, r6
 8004642:	4638      	mov	r0, r7
 8004644:	eb04 0803 	add.w	r8, r4, r3
 8004648:	f000 f8be 	bl	80047c8 <_sbrk_r>
 800464c:	4580      	cmp	r8, r0
 800464e:	d13a      	bne.n	80046c6 <_malloc_r+0xd2>
 8004650:	6821      	ldr	r1, [r4, #0]
 8004652:	3503      	adds	r5, #3
 8004654:	1a6d      	subs	r5, r5, r1
 8004656:	f025 0503 	bic.w	r5, r5, #3
 800465a:	3508      	adds	r5, #8
 800465c:	2d0c      	cmp	r5, #12
 800465e:	bf38      	it	cc
 8004660:	250c      	movcc	r5, #12
 8004662:	4629      	mov	r1, r5
 8004664:	4638      	mov	r0, r7
 8004666:	f7ff ffa5 	bl	80045b4 <sbrk_aligned>
 800466a:	3001      	adds	r0, #1
 800466c:	d02b      	beq.n	80046c6 <_malloc_r+0xd2>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	442b      	add	r3, r5
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	e00e      	b.n	8004694 <_malloc_r+0xa0>
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	1b52      	subs	r2, r2, r5
 800467a:	d41e      	bmi.n	80046ba <_malloc_r+0xc6>
 800467c:	2a0b      	cmp	r2, #11
 800467e:	d916      	bls.n	80046ae <_malloc_r+0xba>
 8004680:	1961      	adds	r1, r4, r5
 8004682:	42a3      	cmp	r3, r4
 8004684:	6025      	str	r5, [r4, #0]
 8004686:	bf18      	it	ne
 8004688:	6059      	strne	r1, [r3, #4]
 800468a:	6863      	ldr	r3, [r4, #4]
 800468c:	bf08      	it	eq
 800468e:	6031      	streq	r1, [r6, #0]
 8004690:	5162      	str	r2, [r4, r5]
 8004692:	604b      	str	r3, [r1, #4]
 8004694:	4638      	mov	r0, r7
 8004696:	f104 060b 	add.w	r6, r4, #11
 800469a:	f000 fd03 	bl	80050a4 <__malloc_unlock>
 800469e:	f026 0607 	bic.w	r6, r6, #7
 80046a2:	1d23      	adds	r3, r4, #4
 80046a4:	1af2      	subs	r2, r6, r3
 80046a6:	d0b6      	beq.n	8004616 <_malloc_r+0x22>
 80046a8:	1b9b      	subs	r3, r3, r6
 80046aa:	50a3      	str	r3, [r4, r2]
 80046ac:	e7b3      	b.n	8004616 <_malloc_r+0x22>
 80046ae:	6862      	ldr	r2, [r4, #4]
 80046b0:	42a3      	cmp	r3, r4
 80046b2:	bf0c      	ite	eq
 80046b4:	6032      	streq	r2, [r6, #0]
 80046b6:	605a      	strne	r2, [r3, #4]
 80046b8:	e7ec      	b.n	8004694 <_malloc_r+0xa0>
 80046ba:	4623      	mov	r3, r4
 80046bc:	6864      	ldr	r4, [r4, #4]
 80046be:	e7b2      	b.n	8004626 <_malloc_r+0x32>
 80046c0:	4634      	mov	r4, r6
 80046c2:	6876      	ldr	r6, [r6, #4]
 80046c4:	e7b9      	b.n	800463a <_malloc_r+0x46>
 80046c6:	230c      	movs	r3, #12
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	4638      	mov	r0, r7
 80046cc:	f000 fcea 	bl	80050a4 <__malloc_unlock>
 80046d0:	e7a1      	b.n	8004616 <_malloc_r+0x22>
 80046d2:	6025      	str	r5, [r4, #0]
 80046d4:	e7de      	b.n	8004694 <_malloc_r+0xa0>
 80046d6:	bf00      	nop
 80046d8:	20000378 	.word	0x20000378

080046dc <_puts_r>:
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	460e      	mov	r6, r1
 80046e0:	4605      	mov	r5, r0
 80046e2:	b118      	cbz	r0, 80046ec <_puts_r+0x10>
 80046e4:	6983      	ldr	r3, [r0, #24]
 80046e6:	b90b      	cbnz	r3, 80046ec <_puts_r+0x10>
 80046e8:	f000 fbbe 	bl	8004e68 <__sinit>
 80046ec:	69ab      	ldr	r3, [r5, #24]
 80046ee:	68ac      	ldr	r4, [r5, #8]
 80046f0:	b913      	cbnz	r3, 80046f8 <_puts_r+0x1c>
 80046f2:	4628      	mov	r0, r5
 80046f4:	f000 fbb8 	bl	8004e68 <__sinit>
 80046f8:	4b2c      	ldr	r3, [pc, #176]	; (80047ac <_puts_r+0xd0>)
 80046fa:	429c      	cmp	r4, r3
 80046fc:	d120      	bne.n	8004740 <_puts_r+0x64>
 80046fe:	686c      	ldr	r4, [r5, #4]
 8004700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004702:	07db      	lsls	r3, r3, #31
 8004704:	d405      	bmi.n	8004712 <_puts_r+0x36>
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	0598      	lsls	r0, r3, #22
 800470a:	d402      	bmi.n	8004712 <_puts_r+0x36>
 800470c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800470e:	f000 fc49 	bl	8004fa4 <__retarget_lock_acquire_recursive>
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	0719      	lsls	r1, r3, #28
 8004716:	d51d      	bpl.n	8004754 <_puts_r+0x78>
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	b1db      	cbz	r3, 8004754 <_puts_r+0x78>
 800471c:	3e01      	subs	r6, #1
 800471e:	68a3      	ldr	r3, [r4, #8]
 8004720:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004724:	3b01      	subs	r3, #1
 8004726:	60a3      	str	r3, [r4, #8]
 8004728:	bb39      	cbnz	r1, 800477a <_puts_r+0x9e>
 800472a:	2b00      	cmp	r3, #0
 800472c:	da38      	bge.n	80047a0 <_puts_r+0xc4>
 800472e:	4622      	mov	r2, r4
 8004730:	210a      	movs	r1, #10
 8004732:	4628      	mov	r0, r5
 8004734:	f000 f99c 	bl	8004a70 <__swbuf_r>
 8004738:	3001      	adds	r0, #1
 800473a:	d011      	beq.n	8004760 <_puts_r+0x84>
 800473c:	250a      	movs	r5, #10
 800473e:	e011      	b.n	8004764 <_puts_r+0x88>
 8004740:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <_puts_r+0xd4>)
 8004742:	429c      	cmp	r4, r3
 8004744:	d101      	bne.n	800474a <_puts_r+0x6e>
 8004746:	68ac      	ldr	r4, [r5, #8]
 8004748:	e7da      	b.n	8004700 <_puts_r+0x24>
 800474a:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <_puts_r+0xd8>)
 800474c:	429c      	cmp	r4, r3
 800474e:	bf08      	it	eq
 8004750:	68ec      	ldreq	r4, [r5, #12]
 8004752:	e7d5      	b.n	8004700 <_puts_r+0x24>
 8004754:	4621      	mov	r1, r4
 8004756:	4628      	mov	r0, r5
 8004758:	f000 f9ee 	bl	8004b38 <__swsetup_r>
 800475c:	2800      	cmp	r0, #0
 800475e:	d0dd      	beq.n	800471c <_puts_r+0x40>
 8004760:	f04f 35ff 	mov.w	r5, #4294967295
 8004764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004766:	07da      	lsls	r2, r3, #31
 8004768:	d405      	bmi.n	8004776 <_puts_r+0x9a>
 800476a:	89a3      	ldrh	r3, [r4, #12]
 800476c:	059b      	lsls	r3, r3, #22
 800476e:	d402      	bmi.n	8004776 <_puts_r+0x9a>
 8004770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004772:	f000 fc18 	bl	8004fa6 <__retarget_lock_release_recursive>
 8004776:	4628      	mov	r0, r5
 8004778:	bd70      	pop	{r4, r5, r6, pc}
 800477a:	2b00      	cmp	r3, #0
 800477c:	da04      	bge.n	8004788 <_puts_r+0xac>
 800477e:	69a2      	ldr	r2, [r4, #24]
 8004780:	429a      	cmp	r2, r3
 8004782:	dc06      	bgt.n	8004792 <_puts_r+0xb6>
 8004784:	290a      	cmp	r1, #10
 8004786:	d004      	beq.n	8004792 <_puts_r+0xb6>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	6022      	str	r2, [r4, #0]
 800478e:	7019      	strb	r1, [r3, #0]
 8004790:	e7c5      	b.n	800471e <_puts_r+0x42>
 8004792:	4622      	mov	r2, r4
 8004794:	4628      	mov	r0, r5
 8004796:	f000 f96b 	bl	8004a70 <__swbuf_r>
 800479a:	3001      	adds	r0, #1
 800479c:	d1bf      	bne.n	800471e <_puts_r+0x42>
 800479e:	e7df      	b.n	8004760 <_puts_r+0x84>
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	250a      	movs	r5, #10
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	6022      	str	r2, [r4, #0]
 80047a8:	701d      	strb	r5, [r3, #0]
 80047aa:	e7db      	b.n	8004764 <_puts_r+0x88>
 80047ac:	08005bf8 	.word	0x08005bf8
 80047b0:	08005c18 	.word	0x08005c18
 80047b4:	08005bd8 	.word	0x08005bd8

080047b8 <puts>:
 80047b8:	4b02      	ldr	r3, [pc, #8]	; (80047c4 <puts+0xc>)
 80047ba:	4601      	mov	r1, r0
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	f7ff bf8d 	b.w	80046dc <_puts_r>
 80047c2:	bf00      	nop
 80047c4:	20000010 	.word	0x20000010

080047c8 <_sbrk_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	4d06      	ldr	r5, [pc, #24]	; (80047e4 <_sbrk_r+0x1c>)
 80047cc:	2300      	movs	r3, #0
 80047ce:	4604      	mov	r4, r0
 80047d0:	4608      	mov	r0, r1
 80047d2:	602b      	str	r3, [r5, #0]
 80047d4:	f7fc fd96 	bl	8001304 <_sbrk>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_sbrk_r+0x1a>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_sbrk_r+0x1a>
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	20000384 	.word	0x20000384

080047e8 <_raise_r>:
 80047e8:	291f      	cmp	r1, #31
 80047ea:	b538      	push	{r3, r4, r5, lr}
 80047ec:	4604      	mov	r4, r0
 80047ee:	460d      	mov	r5, r1
 80047f0:	d904      	bls.n	80047fc <_raise_r+0x14>
 80047f2:	2316      	movs	r3, #22
 80047f4:	6003      	str	r3, [r0, #0]
 80047f6:	f04f 30ff 	mov.w	r0, #4294967295
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80047fe:	b112      	cbz	r2, 8004806 <_raise_r+0x1e>
 8004800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004804:	b94b      	cbnz	r3, 800481a <_raise_r+0x32>
 8004806:	4620      	mov	r0, r4
 8004808:	f000 f830 	bl	800486c <_getpid_r>
 800480c:	462a      	mov	r2, r5
 800480e:	4601      	mov	r1, r0
 8004810:	4620      	mov	r0, r4
 8004812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004816:	f000 b817 	b.w	8004848 <_kill_r>
 800481a:	2b01      	cmp	r3, #1
 800481c:	d00a      	beq.n	8004834 <_raise_r+0x4c>
 800481e:	1c59      	adds	r1, r3, #1
 8004820:	d103      	bne.n	800482a <_raise_r+0x42>
 8004822:	2316      	movs	r3, #22
 8004824:	6003      	str	r3, [r0, #0]
 8004826:	2001      	movs	r0, #1
 8004828:	e7e7      	b.n	80047fa <_raise_r+0x12>
 800482a:	2400      	movs	r4, #0
 800482c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004830:	4628      	mov	r0, r5
 8004832:	4798      	blx	r3
 8004834:	2000      	movs	r0, #0
 8004836:	e7e0      	b.n	80047fa <_raise_r+0x12>

08004838 <raise>:
 8004838:	4b02      	ldr	r3, [pc, #8]	; (8004844 <raise+0xc>)
 800483a:	4601      	mov	r1, r0
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	f7ff bfd3 	b.w	80047e8 <_raise_r>
 8004842:	bf00      	nop
 8004844:	20000010 	.word	0x20000010

08004848 <_kill_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4d07      	ldr	r5, [pc, #28]	; (8004868 <_kill_r+0x20>)
 800484c:	2300      	movs	r3, #0
 800484e:	4604      	mov	r4, r0
 8004850:	4608      	mov	r0, r1
 8004852:	4611      	mov	r1, r2
 8004854:	602b      	str	r3, [r5, #0]
 8004856:	f7fc fce9 	bl	800122c <_kill>
 800485a:	1c43      	adds	r3, r0, #1
 800485c:	d102      	bne.n	8004864 <_kill_r+0x1c>
 800485e:	682b      	ldr	r3, [r5, #0]
 8004860:	b103      	cbz	r3, 8004864 <_kill_r+0x1c>
 8004862:	6023      	str	r3, [r4, #0]
 8004864:	bd38      	pop	{r3, r4, r5, pc}
 8004866:	bf00      	nop
 8004868:	20000384 	.word	0x20000384

0800486c <_getpid_r>:
 800486c:	f7fc bcd6 	b.w	800121c <_getpid>

08004870 <siscanf>:
 8004870:	b40e      	push	{r1, r2, r3}
 8004872:	b510      	push	{r4, lr}
 8004874:	b09f      	sub	sp, #124	; 0x7c
 8004876:	ac21      	add	r4, sp, #132	; 0x84
 8004878:	f44f 7101 	mov.w	r1, #516	; 0x204
 800487c:	f854 2b04 	ldr.w	r2, [r4], #4
 8004880:	9201      	str	r2, [sp, #4]
 8004882:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004886:	9004      	str	r0, [sp, #16]
 8004888:	9008      	str	r0, [sp, #32]
 800488a:	f7fb fcab 	bl	80001e4 <strlen>
 800488e:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <siscanf+0x50>)
 8004890:	9005      	str	r0, [sp, #20]
 8004892:	9009      	str	r0, [sp, #36]	; 0x24
 8004894:	930d      	str	r3, [sp, #52]	; 0x34
 8004896:	480b      	ldr	r0, [pc, #44]	; (80048c4 <siscanf+0x54>)
 8004898:	9a01      	ldr	r2, [sp, #4]
 800489a:	6800      	ldr	r0, [r0, #0]
 800489c:	9403      	str	r4, [sp, #12]
 800489e:	2300      	movs	r3, #0
 80048a0:	9311      	str	r3, [sp, #68]	; 0x44
 80048a2:	9316      	str	r3, [sp, #88]	; 0x58
 80048a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80048ac:	a904      	add	r1, sp, #16
 80048ae:	4623      	mov	r3, r4
 80048b0:	f000 fc58 	bl	8005164 <__ssvfiscanf_r>
 80048b4:	b01f      	add	sp, #124	; 0x7c
 80048b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ba:	b003      	add	sp, #12
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	080048eb 	.word	0x080048eb
 80048c4:	20000010 	.word	0x20000010

080048c8 <__sread>:
 80048c8:	b510      	push	{r4, lr}
 80048ca:	460c      	mov	r4, r1
 80048cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d0:	f000 ff12 	bl	80056f8 <_read_r>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	bfab      	itete	ge
 80048d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048da:	89a3      	ldrhlt	r3, [r4, #12]
 80048dc:	181b      	addge	r3, r3, r0
 80048de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048e2:	bfac      	ite	ge
 80048e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80048e6:	81a3      	strhlt	r3, [r4, #12]
 80048e8:	bd10      	pop	{r4, pc}

080048ea <__seofread>:
 80048ea:	2000      	movs	r0, #0
 80048ec:	4770      	bx	lr

080048ee <__swrite>:
 80048ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f2:	461f      	mov	r7, r3
 80048f4:	898b      	ldrh	r3, [r1, #12]
 80048f6:	05db      	lsls	r3, r3, #23
 80048f8:	4605      	mov	r5, r0
 80048fa:	460c      	mov	r4, r1
 80048fc:	4616      	mov	r6, r2
 80048fe:	d505      	bpl.n	800490c <__swrite+0x1e>
 8004900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004904:	2302      	movs	r3, #2
 8004906:	2200      	movs	r2, #0
 8004908:	f000 fb4e 	bl	8004fa8 <_lseek_r>
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004916:	81a3      	strh	r3, [r4, #12]
 8004918:	4632      	mov	r2, r6
 800491a:	463b      	mov	r3, r7
 800491c:	4628      	mov	r0, r5
 800491e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004922:	f000 b8f7 	b.w	8004b14 <_write_r>

08004926 <__sseek>:
 8004926:	b510      	push	{r4, lr}
 8004928:	460c      	mov	r4, r1
 800492a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800492e:	f000 fb3b 	bl	8004fa8 <_lseek_r>
 8004932:	1c43      	adds	r3, r0, #1
 8004934:	89a3      	ldrh	r3, [r4, #12]
 8004936:	bf15      	itete	ne
 8004938:	6560      	strne	r0, [r4, #84]	; 0x54
 800493a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800493e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004942:	81a3      	strheq	r3, [r4, #12]
 8004944:	bf18      	it	ne
 8004946:	81a3      	strhne	r3, [r4, #12]
 8004948:	bd10      	pop	{r4, pc}

0800494a <__sclose>:
 800494a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800494e:	f000 b961 	b.w	8004c14 <_close_r>
	...

08004954 <_strtol_l.constprop.0>:
 8004954:	2b01      	cmp	r3, #1
 8004956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800495a:	d001      	beq.n	8004960 <_strtol_l.constprop.0+0xc>
 800495c:	2b24      	cmp	r3, #36	; 0x24
 800495e:	d906      	bls.n	800496e <_strtol_l.constprop.0+0x1a>
 8004960:	f7ff fd9a 	bl	8004498 <__errno>
 8004964:	2316      	movs	r3, #22
 8004966:	6003      	str	r3, [r0, #0]
 8004968:	2000      	movs	r0, #0
 800496a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004a54 <_strtol_l.constprop.0+0x100>
 8004972:	460d      	mov	r5, r1
 8004974:	462e      	mov	r6, r5
 8004976:	f815 4b01 	ldrb.w	r4, [r5], #1
 800497a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800497e:	f017 0708 	ands.w	r7, r7, #8
 8004982:	d1f7      	bne.n	8004974 <_strtol_l.constprop.0+0x20>
 8004984:	2c2d      	cmp	r4, #45	; 0x2d
 8004986:	d132      	bne.n	80049ee <_strtol_l.constprop.0+0x9a>
 8004988:	782c      	ldrb	r4, [r5, #0]
 800498a:	2701      	movs	r7, #1
 800498c:	1cb5      	adds	r5, r6, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d05b      	beq.n	8004a4a <_strtol_l.constprop.0+0xf6>
 8004992:	2b10      	cmp	r3, #16
 8004994:	d109      	bne.n	80049aa <_strtol_l.constprop.0+0x56>
 8004996:	2c30      	cmp	r4, #48	; 0x30
 8004998:	d107      	bne.n	80049aa <_strtol_l.constprop.0+0x56>
 800499a:	782c      	ldrb	r4, [r5, #0]
 800499c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80049a0:	2c58      	cmp	r4, #88	; 0x58
 80049a2:	d14d      	bne.n	8004a40 <_strtol_l.constprop.0+0xec>
 80049a4:	786c      	ldrb	r4, [r5, #1]
 80049a6:	2310      	movs	r3, #16
 80049a8:	3502      	adds	r5, #2
 80049aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80049ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80049b2:	f04f 0c00 	mov.w	ip, #0
 80049b6:	fbb8 f9f3 	udiv	r9, r8, r3
 80049ba:	4666      	mov	r6, ip
 80049bc:	fb03 8a19 	mls	sl, r3, r9, r8
 80049c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80049c4:	f1be 0f09 	cmp.w	lr, #9
 80049c8:	d816      	bhi.n	80049f8 <_strtol_l.constprop.0+0xa4>
 80049ca:	4674      	mov	r4, lr
 80049cc:	42a3      	cmp	r3, r4
 80049ce:	dd24      	ble.n	8004a1a <_strtol_l.constprop.0+0xc6>
 80049d0:	f1bc 0f00 	cmp.w	ip, #0
 80049d4:	db1e      	blt.n	8004a14 <_strtol_l.constprop.0+0xc0>
 80049d6:	45b1      	cmp	r9, r6
 80049d8:	d31c      	bcc.n	8004a14 <_strtol_l.constprop.0+0xc0>
 80049da:	d101      	bne.n	80049e0 <_strtol_l.constprop.0+0x8c>
 80049dc:	45a2      	cmp	sl, r4
 80049de:	db19      	blt.n	8004a14 <_strtol_l.constprop.0+0xc0>
 80049e0:	fb06 4603 	mla	r6, r6, r3, r4
 80049e4:	f04f 0c01 	mov.w	ip, #1
 80049e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049ec:	e7e8      	b.n	80049c0 <_strtol_l.constprop.0+0x6c>
 80049ee:	2c2b      	cmp	r4, #43	; 0x2b
 80049f0:	bf04      	itt	eq
 80049f2:	782c      	ldrbeq	r4, [r5, #0]
 80049f4:	1cb5      	addeq	r5, r6, #2
 80049f6:	e7ca      	b.n	800498e <_strtol_l.constprop.0+0x3a>
 80049f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80049fc:	f1be 0f19 	cmp.w	lr, #25
 8004a00:	d801      	bhi.n	8004a06 <_strtol_l.constprop.0+0xb2>
 8004a02:	3c37      	subs	r4, #55	; 0x37
 8004a04:	e7e2      	b.n	80049cc <_strtol_l.constprop.0+0x78>
 8004a06:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004a0a:	f1be 0f19 	cmp.w	lr, #25
 8004a0e:	d804      	bhi.n	8004a1a <_strtol_l.constprop.0+0xc6>
 8004a10:	3c57      	subs	r4, #87	; 0x57
 8004a12:	e7db      	b.n	80049cc <_strtol_l.constprop.0+0x78>
 8004a14:	f04f 3cff 	mov.w	ip, #4294967295
 8004a18:	e7e6      	b.n	80049e8 <_strtol_l.constprop.0+0x94>
 8004a1a:	f1bc 0f00 	cmp.w	ip, #0
 8004a1e:	da05      	bge.n	8004a2c <_strtol_l.constprop.0+0xd8>
 8004a20:	2322      	movs	r3, #34	; 0x22
 8004a22:	6003      	str	r3, [r0, #0]
 8004a24:	4646      	mov	r6, r8
 8004a26:	b942      	cbnz	r2, 8004a3a <_strtol_l.constprop.0+0xe6>
 8004a28:	4630      	mov	r0, r6
 8004a2a:	e79e      	b.n	800496a <_strtol_l.constprop.0+0x16>
 8004a2c:	b107      	cbz	r7, 8004a30 <_strtol_l.constprop.0+0xdc>
 8004a2e:	4276      	negs	r6, r6
 8004a30:	2a00      	cmp	r2, #0
 8004a32:	d0f9      	beq.n	8004a28 <_strtol_l.constprop.0+0xd4>
 8004a34:	f1bc 0f00 	cmp.w	ip, #0
 8004a38:	d000      	beq.n	8004a3c <_strtol_l.constprop.0+0xe8>
 8004a3a:	1e69      	subs	r1, r5, #1
 8004a3c:	6011      	str	r1, [r2, #0]
 8004a3e:	e7f3      	b.n	8004a28 <_strtol_l.constprop.0+0xd4>
 8004a40:	2430      	movs	r4, #48	; 0x30
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1b1      	bne.n	80049aa <_strtol_l.constprop.0+0x56>
 8004a46:	2308      	movs	r3, #8
 8004a48:	e7af      	b.n	80049aa <_strtol_l.constprop.0+0x56>
 8004a4a:	2c30      	cmp	r4, #48	; 0x30
 8004a4c:	d0a5      	beq.n	800499a <_strtol_l.constprop.0+0x46>
 8004a4e:	230a      	movs	r3, #10
 8004a50:	e7ab      	b.n	80049aa <_strtol_l.constprop.0+0x56>
 8004a52:	bf00      	nop
 8004a54:	08005ad5 	.word	0x08005ad5

08004a58 <_strtol_r>:
 8004a58:	f7ff bf7c 	b.w	8004954 <_strtol_l.constprop.0>

08004a5c <strtol>:
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	460a      	mov	r2, r1
 8004a60:	4601      	mov	r1, r0
 8004a62:	4802      	ldr	r0, [pc, #8]	; (8004a6c <strtol+0x10>)
 8004a64:	6800      	ldr	r0, [r0, #0]
 8004a66:	f7ff bf75 	b.w	8004954 <_strtol_l.constprop.0>
 8004a6a:	bf00      	nop
 8004a6c:	20000010 	.word	0x20000010

08004a70 <__swbuf_r>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	460e      	mov	r6, r1
 8004a74:	4614      	mov	r4, r2
 8004a76:	4605      	mov	r5, r0
 8004a78:	b118      	cbz	r0, 8004a82 <__swbuf_r+0x12>
 8004a7a:	6983      	ldr	r3, [r0, #24]
 8004a7c:	b90b      	cbnz	r3, 8004a82 <__swbuf_r+0x12>
 8004a7e:	f000 f9f3 	bl	8004e68 <__sinit>
 8004a82:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <__swbuf_r+0x98>)
 8004a84:	429c      	cmp	r4, r3
 8004a86:	d12b      	bne.n	8004ae0 <__swbuf_r+0x70>
 8004a88:	686c      	ldr	r4, [r5, #4]
 8004a8a:	69a3      	ldr	r3, [r4, #24]
 8004a8c:	60a3      	str	r3, [r4, #8]
 8004a8e:	89a3      	ldrh	r3, [r4, #12]
 8004a90:	071a      	lsls	r2, r3, #28
 8004a92:	d52f      	bpl.n	8004af4 <__swbuf_r+0x84>
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	b36b      	cbz	r3, 8004af4 <__swbuf_r+0x84>
 8004a98:	6923      	ldr	r3, [r4, #16]
 8004a9a:	6820      	ldr	r0, [r4, #0]
 8004a9c:	1ac0      	subs	r0, r0, r3
 8004a9e:	6963      	ldr	r3, [r4, #20]
 8004aa0:	b2f6      	uxtb	r6, r6
 8004aa2:	4283      	cmp	r3, r0
 8004aa4:	4637      	mov	r7, r6
 8004aa6:	dc04      	bgt.n	8004ab2 <__swbuf_r+0x42>
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 f948 	bl	8004d40 <_fflush_r>
 8004ab0:	bb30      	cbnz	r0, 8004b00 <__swbuf_r+0x90>
 8004ab2:	68a3      	ldr	r3, [r4, #8]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	60a3      	str	r3, [r4, #8]
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	6022      	str	r2, [r4, #0]
 8004abe:	701e      	strb	r6, [r3, #0]
 8004ac0:	6963      	ldr	r3, [r4, #20]
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	4283      	cmp	r3, r0
 8004ac6:	d004      	beq.n	8004ad2 <__swbuf_r+0x62>
 8004ac8:	89a3      	ldrh	r3, [r4, #12]
 8004aca:	07db      	lsls	r3, r3, #31
 8004acc:	d506      	bpl.n	8004adc <__swbuf_r+0x6c>
 8004ace:	2e0a      	cmp	r6, #10
 8004ad0:	d104      	bne.n	8004adc <__swbuf_r+0x6c>
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f000 f933 	bl	8004d40 <_fflush_r>
 8004ada:	b988      	cbnz	r0, 8004b00 <__swbuf_r+0x90>
 8004adc:	4638      	mov	r0, r7
 8004ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <__swbuf_r+0x9c>)
 8004ae2:	429c      	cmp	r4, r3
 8004ae4:	d101      	bne.n	8004aea <__swbuf_r+0x7a>
 8004ae6:	68ac      	ldr	r4, [r5, #8]
 8004ae8:	e7cf      	b.n	8004a8a <__swbuf_r+0x1a>
 8004aea:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <__swbuf_r+0xa0>)
 8004aec:	429c      	cmp	r4, r3
 8004aee:	bf08      	it	eq
 8004af0:	68ec      	ldreq	r4, [r5, #12]
 8004af2:	e7ca      	b.n	8004a8a <__swbuf_r+0x1a>
 8004af4:	4621      	mov	r1, r4
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 f81e 	bl	8004b38 <__swsetup_r>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d0cb      	beq.n	8004a98 <__swbuf_r+0x28>
 8004b00:	f04f 37ff 	mov.w	r7, #4294967295
 8004b04:	e7ea      	b.n	8004adc <__swbuf_r+0x6c>
 8004b06:	bf00      	nop
 8004b08:	08005bf8 	.word	0x08005bf8
 8004b0c:	08005c18 	.word	0x08005c18
 8004b10:	08005bd8 	.word	0x08005bd8

08004b14 <_write_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4d07      	ldr	r5, [pc, #28]	; (8004b34 <_write_r+0x20>)
 8004b18:	4604      	mov	r4, r0
 8004b1a:	4608      	mov	r0, r1
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	2200      	movs	r2, #0
 8004b20:	602a      	str	r2, [r5, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	f7fc f9f4 	bl	8000f10 <_write>
 8004b28:	1c43      	adds	r3, r0, #1
 8004b2a:	d102      	bne.n	8004b32 <_write_r+0x1e>
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	b103      	cbz	r3, 8004b32 <_write_r+0x1e>
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
 8004b34:	20000384 	.word	0x20000384

08004b38 <__swsetup_r>:
 8004b38:	4b32      	ldr	r3, [pc, #200]	; (8004c04 <__swsetup_r+0xcc>)
 8004b3a:	b570      	push	{r4, r5, r6, lr}
 8004b3c:	681d      	ldr	r5, [r3, #0]
 8004b3e:	4606      	mov	r6, r0
 8004b40:	460c      	mov	r4, r1
 8004b42:	b125      	cbz	r5, 8004b4e <__swsetup_r+0x16>
 8004b44:	69ab      	ldr	r3, [r5, #24]
 8004b46:	b913      	cbnz	r3, 8004b4e <__swsetup_r+0x16>
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f000 f98d 	bl	8004e68 <__sinit>
 8004b4e:	4b2e      	ldr	r3, [pc, #184]	; (8004c08 <__swsetup_r+0xd0>)
 8004b50:	429c      	cmp	r4, r3
 8004b52:	d10f      	bne.n	8004b74 <__swsetup_r+0x3c>
 8004b54:	686c      	ldr	r4, [r5, #4]
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b5c:	0719      	lsls	r1, r3, #28
 8004b5e:	d42c      	bmi.n	8004bba <__swsetup_r+0x82>
 8004b60:	06dd      	lsls	r5, r3, #27
 8004b62:	d411      	bmi.n	8004b88 <__swsetup_r+0x50>
 8004b64:	2309      	movs	r3, #9
 8004b66:	6033      	str	r3, [r6, #0]
 8004b68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b6c:	81a3      	strh	r3, [r4, #12]
 8004b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b72:	e03e      	b.n	8004bf2 <__swsetup_r+0xba>
 8004b74:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <__swsetup_r+0xd4>)
 8004b76:	429c      	cmp	r4, r3
 8004b78:	d101      	bne.n	8004b7e <__swsetup_r+0x46>
 8004b7a:	68ac      	ldr	r4, [r5, #8]
 8004b7c:	e7eb      	b.n	8004b56 <__swsetup_r+0x1e>
 8004b7e:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <__swsetup_r+0xd8>)
 8004b80:	429c      	cmp	r4, r3
 8004b82:	bf08      	it	eq
 8004b84:	68ec      	ldreq	r4, [r5, #12]
 8004b86:	e7e6      	b.n	8004b56 <__swsetup_r+0x1e>
 8004b88:	0758      	lsls	r0, r3, #29
 8004b8a:	d512      	bpl.n	8004bb2 <__swsetup_r+0x7a>
 8004b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b8e:	b141      	cbz	r1, 8004ba2 <__swsetup_r+0x6a>
 8004b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b94:	4299      	cmp	r1, r3
 8004b96:	d002      	beq.n	8004b9e <__swsetup_r+0x66>
 8004b98:	4630      	mov	r0, r6
 8004b9a:	f7ff fcbf 	bl	800451c <_free_r>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	6363      	str	r3, [r4, #52]	; 0x34
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ba8:	81a3      	strh	r3, [r4, #12]
 8004baa:	2300      	movs	r3, #0
 8004bac:	6063      	str	r3, [r4, #4]
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	f043 0308 	orr.w	r3, r3, #8
 8004bb8:	81a3      	strh	r3, [r4, #12]
 8004bba:	6923      	ldr	r3, [r4, #16]
 8004bbc:	b94b      	cbnz	r3, 8004bd2 <__swsetup_r+0x9a>
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc8:	d003      	beq.n	8004bd2 <__swsetup_r+0x9a>
 8004bca:	4621      	mov	r1, r4
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f000 fa23 	bl	8005018 <__smakebuf_r>
 8004bd2:	89a0      	ldrh	r0, [r4, #12]
 8004bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bd8:	f010 0301 	ands.w	r3, r0, #1
 8004bdc:	d00a      	beq.n	8004bf4 <__swsetup_r+0xbc>
 8004bde:	2300      	movs	r3, #0
 8004be0:	60a3      	str	r3, [r4, #8]
 8004be2:	6963      	ldr	r3, [r4, #20]
 8004be4:	425b      	negs	r3, r3
 8004be6:	61a3      	str	r3, [r4, #24]
 8004be8:	6923      	ldr	r3, [r4, #16]
 8004bea:	b943      	cbnz	r3, 8004bfe <__swsetup_r+0xc6>
 8004bec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004bf0:	d1ba      	bne.n	8004b68 <__swsetup_r+0x30>
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}
 8004bf4:	0781      	lsls	r1, r0, #30
 8004bf6:	bf58      	it	pl
 8004bf8:	6963      	ldrpl	r3, [r4, #20]
 8004bfa:	60a3      	str	r3, [r4, #8]
 8004bfc:	e7f4      	b.n	8004be8 <__swsetup_r+0xb0>
 8004bfe:	2000      	movs	r0, #0
 8004c00:	e7f7      	b.n	8004bf2 <__swsetup_r+0xba>
 8004c02:	bf00      	nop
 8004c04:	20000010 	.word	0x20000010
 8004c08:	08005bf8 	.word	0x08005bf8
 8004c0c:	08005c18 	.word	0x08005c18
 8004c10:	08005bd8 	.word	0x08005bd8

08004c14 <_close_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	4d06      	ldr	r5, [pc, #24]	; (8004c30 <_close_r+0x1c>)
 8004c18:	2300      	movs	r3, #0
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	4608      	mov	r0, r1
 8004c1e:	602b      	str	r3, [r5, #0]
 8004c20:	f7fc fb3b 	bl	800129a <_close>
 8004c24:	1c43      	adds	r3, r0, #1
 8004c26:	d102      	bne.n	8004c2e <_close_r+0x1a>
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	b103      	cbz	r3, 8004c2e <_close_r+0x1a>
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	bd38      	pop	{r3, r4, r5, pc}
 8004c30:	20000384 	.word	0x20000384

08004c34 <__sflush_r>:
 8004c34:	898a      	ldrh	r2, [r1, #12]
 8004c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	0710      	lsls	r0, r2, #28
 8004c3e:	460c      	mov	r4, r1
 8004c40:	d458      	bmi.n	8004cf4 <__sflush_r+0xc0>
 8004c42:	684b      	ldr	r3, [r1, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	dc05      	bgt.n	8004c54 <__sflush_r+0x20>
 8004c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dc02      	bgt.n	8004c54 <__sflush_r+0x20>
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c56:	2e00      	cmp	r6, #0
 8004c58:	d0f9      	beq.n	8004c4e <__sflush_r+0x1a>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c60:	682f      	ldr	r7, [r5, #0]
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	d032      	beq.n	8004ccc <__sflush_r+0x98>
 8004c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	075a      	lsls	r2, r3, #29
 8004c6c:	d505      	bpl.n	8004c7a <__sflush_r+0x46>
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	1ac0      	subs	r0, r0, r3
 8004c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c74:	b10b      	cbz	r3, 8004c7a <__sflush_r+0x46>
 8004c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c78:	1ac0      	subs	r0, r0, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c80:	6a21      	ldr	r1, [r4, #32]
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b0      	blx	r6
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	d106      	bne.n	8004c9a <__sflush_r+0x66>
 8004c8c:	6829      	ldr	r1, [r5, #0]
 8004c8e:	291d      	cmp	r1, #29
 8004c90:	d82c      	bhi.n	8004cec <__sflush_r+0xb8>
 8004c92:	4a2a      	ldr	r2, [pc, #168]	; (8004d3c <__sflush_r+0x108>)
 8004c94:	40ca      	lsrs	r2, r1
 8004c96:	07d6      	lsls	r6, r2, #31
 8004c98:	d528      	bpl.n	8004cec <__sflush_r+0xb8>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	6062      	str	r2, [r4, #4]
 8004c9e:	04d9      	lsls	r1, r3, #19
 8004ca0:	6922      	ldr	r2, [r4, #16]
 8004ca2:	6022      	str	r2, [r4, #0]
 8004ca4:	d504      	bpl.n	8004cb0 <__sflush_r+0x7c>
 8004ca6:	1c42      	adds	r2, r0, #1
 8004ca8:	d101      	bne.n	8004cae <__sflush_r+0x7a>
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	b903      	cbnz	r3, 8004cb0 <__sflush_r+0x7c>
 8004cae:	6560      	str	r0, [r4, #84]	; 0x54
 8004cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cb2:	602f      	str	r7, [r5, #0]
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	d0ca      	beq.n	8004c4e <__sflush_r+0x1a>
 8004cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cbc:	4299      	cmp	r1, r3
 8004cbe:	d002      	beq.n	8004cc6 <__sflush_r+0x92>
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f7ff fc2b 	bl	800451c <_free_r>
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8004cca:	e7c1      	b.n	8004c50 <__sflush_r+0x1c>
 8004ccc:	6a21      	ldr	r1, [r4, #32]
 8004cce:	2301      	movs	r3, #1
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b0      	blx	r6
 8004cd4:	1c41      	adds	r1, r0, #1
 8004cd6:	d1c7      	bne.n	8004c68 <__sflush_r+0x34>
 8004cd8:	682b      	ldr	r3, [r5, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0c4      	beq.n	8004c68 <__sflush_r+0x34>
 8004cde:	2b1d      	cmp	r3, #29
 8004ce0:	d001      	beq.n	8004ce6 <__sflush_r+0xb2>
 8004ce2:	2b16      	cmp	r3, #22
 8004ce4:	d101      	bne.n	8004cea <__sflush_r+0xb6>
 8004ce6:	602f      	str	r7, [r5, #0]
 8004ce8:	e7b1      	b.n	8004c4e <__sflush_r+0x1a>
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	e7ad      	b.n	8004c50 <__sflush_r+0x1c>
 8004cf4:	690f      	ldr	r7, [r1, #16]
 8004cf6:	2f00      	cmp	r7, #0
 8004cf8:	d0a9      	beq.n	8004c4e <__sflush_r+0x1a>
 8004cfa:	0793      	lsls	r3, r2, #30
 8004cfc:	680e      	ldr	r6, [r1, #0]
 8004cfe:	bf08      	it	eq
 8004d00:	694b      	ldreq	r3, [r1, #20]
 8004d02:	600f      	str	r7, [r1, #0]
 8004d04:	bf18      	it	ne
 8004d06:	2300      	movne	r3, #0
 8004d08:	eba6 0807 	sub.w	r8, r6, r7
 8004d0c:	608b      	str	r3, [r1, #8]
 8004d0e:	f1b8 0f00 	cmp.w	r8, #0
 8004d12:	dd9c      	ble.n	8004c4e <__sflush_r+0x1a>
 8004d14:	6a21      	ldr	r1, [r4, #32]
 8004d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d18:	4643      	mov	r3, r8
 8004d1a:	463a      	mov	r2, r7
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	47b0      	blx	r6
 8004d20:	2800      	cmp	r0, #0
 8004d22:	dc06      	bgt.n	8004d32 <__sflush_r+0xfe>
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d30:	e78e      	b.n	8004c50 <__sflush_r+0x1c>
 8004d32:	4407      	add	r7, r0
 8004d34:	eba8 0800 	sub.w	r8, r8, r0
 8004d38:	e7e9      	b.n	8004d0e <__sflush_r+0xda>
 8004d3a:	bf00      	nop
 8004d3c:	20400001 	.word	0x20400001

08004d40 <_fflush_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	690b      	ldr	r3, [r1, #16]
 8004d44:	4605      	mov	r5, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	b913      	cbnz	r3, 8004d50 <_fflush_r+0x10>
 8004d4a:	2500      	movs	r5, #0
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	b118      	cbz	r0, 8004d5a <_fflush_r+0x1a>
 8004d52:	6983      	ldr	r3, [r0, #24]
 8004d54:	b90b      	cbnz	r3, 8004d5a <_fflush_r+0x1a>
 8004d56:	f000 f887 	bl	8004e68 <__sinit>
 8004d5a:	4b14      	ldr	r3, [pc, #80]	; (8004dac <_fflush_r+0x6c>)
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	d11b      	bne.n	8004d98 <_fflush_r+0x58>
 8004d60:	686c      	ldr	r4, [r5, #4]
 8004d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0ef      	beq.n	8004d4a <_fflush_r+0xa>
 8004d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d6c:	07d0      	lsls	r0, r2, #31
 8004d6e:	d404      	bmi.n	8004d7a <_fflush_r+0x3a>
 8004d70:	0599      	lsls	r1, r3, #22
 8004d72:	d402      	bmi.n	8004d7a <_fflush_r+0x3a>
 8004d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d76:	f000 f915 	bl	8004fa4 <__retarget_lock_acquire_recursive>
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	f7ff ff59 	bl	8004c34 <__sflush_r>
 8004d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d84:	07da      	lsls	r2, r3, #31
 8004d86:	4605      	mov	r5, r0
 8004d88:	d4e0      	bmi.n	8004d4c <_fflush_r+0xc>
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	059b      	lsls	r3, r3, #22
 8004d8e:	d4dd      	bmi.n	8004d4c <_fflush_r+0xc>
 8004d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d92:	f000 f908 	bl	8004fa6 <__retarget_lock_release_recursive>
 8004d96:	e7d9      	b.n	8004d4c <_fflush_r+0xc>
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <_fflush_r+0x70>)
 8004d9a:	429c      	cmp	r4, r3
 8004d9c:	d101      	bne.n	8004da2 <_fflush_r+0x62>
 8004d9e:	68ac      	ldr	r4, [r5, #8]
 8004da0:	e7df      	b.n	8004d62 <_fflush_r+0x22>
 8004da2:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <_fflush_r+0x74>)
 8004da4:	429c      	cmp	r4, r3
 8004da6:	bf08      	it	eq
 8004da8:	68ec      	ldreq	r4, [r5, #12]
 8004daa:	e7da      	b.n	8004d62 <_fflush_r+0x22>
 8004dac:	08005bf8 	.word	0x08005bf8
 8004db0:	08005c18 	.word	0x08005c18
 8004db4:	08005bd8 	.word	0x08005bd8

08004db8 <std>:
 8004db8:	2300      	movs	r3, #0
 8004dba:	b510      	push	{r4, lr}
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8004dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dc6:	6083      	str	r3, [r0, #8]
 8004dc8:	8181      	strh	r1, [r0, #12]
 8004dca:	6643      	str	r3, [r0, #100]	; 0x64
 8004dcc:	81c2      	strh	r2, [r0, #14]
 8004dce:	6183      	str	r3, [r0, #24]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	305c      	adds	r0, #92	; 0x5c
 8004dd6:	f7ff fb99 	bl	800450c <memset>
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <std+0x38>)
 8004ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <std+0x3c>)
 8004de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <std+0x40>)
 8004de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <std+0x44>)
 8004de8:	6224      	str	r4, [r4, #32]
 8004dea:	6323      	str	r3, [r4, #48]	; 0x30
 8004dec:	bd10      	pop	{r4, pc}
 8004dee:	bf00      	nop
 8004df0:	080048c9 	.word	0x080048c9
 8004df4:	080048ef 	.word	0x080048ef
 8004df8:	08004927 	.word	0x08004927
 8004dfc:	0800494b 	.word	0x0800494b

08004e00 <_cleanup_r>:
 8004e00:	4901      	ldr	r1, [pc, #4]	; (8004e08 <_cleanup_r+0x8>)
 8004e02:	f000 b8af 	b.w	8004f64 <_fwalk_reent>
 8004e06:	bf00      	nop
 8004e08:	08004d41 	.word	0x08004d41

08004e0c <__sfmoreglue>:
 8004e0c:	b570      	push	{r4, r5, r6, lr}
 8004e0e:	2268      	movs	r2, #104	; 0x68
 8004e10:	1e4d      	subs	r5, r1, #1
 8004e12:	4355      	muls	r5, r2
 8004e14:	460e      	mov	r6, r1
 8004e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e1a:	f7ff fbeb 	bl	80045f4 <_malloc_r>
 8004e1e:	4604      	mov	r4, r0
 8004e20:	b140      	cbz	r0, 8004e34 <__sfmoreglue+0x28>
 8004e22:	2100      	movs	r1, #0
 8004e24:	e9c0 1600 	strd	r1, r6, [r0]
 8004e28:	300c      	adds	r0, #12
 8004e2a:	60a0      	str	r0, [r4, #8]
 8004e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e30:	f7ff fb6c 	bl	800450c <memset>
 8004e34:	4620      	mov	r0, r4
 8004e36:	bd70      	pop	{r4, r5, r6, pc}

08004e38 <__sfp_lock_acquire>:
 8004e38:	4801      	ldr	r0, [pc, #4]	; (8004e40 <__sfp_lock_acquire+0x8>)
 8004e3a:	f000 b8b3 	b.w	8004fa4 <__retarget_lock_acquire_recursive>
 8004e3e:	bf00      	nop
 8004e40:	20000381 	.word	0x20000381

08004e44 <__sfp_lock_release>:
 8004e44:	4801      	ldr	r0, [pc, #4]	; (8004e4c <__sfp_lock_release+0x8>)
 8004e46:	f000 b8ae 	b.w	8004fa6 <__retarget_lock_release_recursive>
 8004e4a:	bf00      	nop
 8004e4c:	20000381 	.word	0x20000381

08004e50 <__sinit_lock_acquire>:
 8004e50:	4801      	ldr	r0, [pc, #4]	; (8004e58 <__sinit_lock_acquire+0x8>)
 8004e52:	f000 b8a7 	b.w	8004fa4 <__retarget_lock_acquire_recursive>
 8004e56:	bf00      	nop
 8004e58:	20000382 	.word	0x20000382

08004e5c <__sinit_lock_release>:
 8004e5c:	4801      	ldr	r0, [pc, #4]	; (8004e64 <__sinit_lock_release+0x8>)
 8004e5e:	f000 b8a2 	b.w	8004fa6 <__retarget_lock_release_recursive>
 8004e62:	bf00      	nop
 8004e64:	20000382 	.word	0x20000382

08004e68 <__sinit>:
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	f7ff fff0 	bl	8004e50 <__sinit_lock_acquire>
 8004e70:	69a3      	ldr	r3, [r4, #24]
 8004e72:	b11b      	cbz	r3, 8004e7c <__sinit+0x14>
 8004e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e78:	f7ff bff0 	b.w	8004e5c <__sinit_lock_release>
 8004e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e80:	6523      	str	r3, [r4, #80]	; 0x50
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <__sinit+0x68>)
 8004e84:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <__sinit+0x6c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	bf04      	itt	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	61a3      	streq	r3, [r4, #24]
 8004e92:	4620      	mov	r0, r4
 8004e94:	f000 f820 	bl	8004ed8 <__sfp>
 8004e98:	6060      	str	r0, [r4, #4]
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f000 f81c 	bl	8004ed8 <__sfp>
 8004ea0:	60a0      	str	r0, [r4, #8]
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f000 f818 	bl	8004ed8 <__sfp>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	60e0      	str	r0, [r4, #12]
 8004eac:	2104      	movs	r1, #4
 8004eae:	6860      	ldr	r0, [r4, #4]
 8004eb0:	f7ff ff82 	bl	8004db8 <std>
 8004eb4:	68a0      	ldr	r0, [r4, #8]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	2109      	movs	r1, #9
 8004eba:	f7ff ff7d 	bl	8004db8 <std>
 8004ebe:	68e0      	ldr	r0, [r4, #12]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	2112      	movs	r1, #18
 8004ec4:	f7ff ff78 	bl	8004db8 <std>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	61a3      	str	r3, [r4, #24]
 8004ecc:	e7d2      	b.n	8004e74 <__sinit+0xc>
 8004ece:	bf00      	nop
 8004ed0:	08005ad0 	.word	0x08005ad0
 8004ed4:	08004e01 	.word	0x08004e01

08004ed8 <__sfp>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	4607      	mov	r7, r0
 8004edc:	f7ff ffac 	bl	8004e38 <__sfp_lock_acquire>
 8004ee0:	4b1e      	ldr	r3, [pc, #120]	; (8004f5c <__sfp+0x84>)
 8004ee2:	681e      	ldr	r6, [r3, #0]
 8004ee4:	69b3      	ldr	r3, [r6, #24]
 8004ee6:	b913      	cbnz	r3, 8004eee <__sfp+0x16>
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f7ff ffbd 	bl	8004e68 <__sinit>
 8004eee:	3648      	adds	r6, #72	; 0x48
 8004ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	d503      	bpl.n	8004f00 <__sfp+0x28>
 8004ef8:	6833      	ldr	r3, [r6, #0]
 8004efa:	b30b      	cbz	r3, 8004f40 <__sfp+0x68>
 8004efc:	6836      	ldr	r6, [r6, #0]
 8004efe:	e7f7      	b.n	8004ef0 <__sfp+0x18>
 8004f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f04:	b9d5      	cbnz	r5, 8004f3c <__sfp+0x64>
 8004f06:	4b16      	ldr	r3, [pc, #88]	; (8004f60 <__sfp+0x88>)
 8004f08:	60e3      	str	r3, [r4, #12]
 8004f0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f0e:	6665      	str	r5, [r4, #100]	; 0x64
 8004f10:	f000 f847 	bl	8004fa2 <__retarget_lock_init_recursive>
 8004f14:	f7ff ff96 	bl	8004e44 <__sfp_lock_release>
 8004f18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f20:	6025      	str	r5, [r4, #0]
 8004f22:	61a5      	str	r5, [r4, #24]
 8004f24:	2208      	movs	r2, #8
 8004f26:	4629      	mov	r1, r5
 8004f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f2c:	f7ff faee 	bl	800450c <memset>
 8004f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f38:	4620      	mov	r0, r4
 8004f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f3c:	3468      	adds	r4, #104	; 0x68
 8004f3e:	e7d9      	b.n	8004ef4 <__sfp+0x1c>
 8004f40:	2104      	movs	r1, #4
 8004f42:	4638      	mov	r0, r7
 8004f44:	f7ff ff62 	bl	8004e0c <__sfmoreglue>
 8004f48:	4604      	mov	r4, r0
 8004f4a:	6030      	str	r0, [r6, #0]
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d1d5      	bne.n	8004efc <__sfp+0x24>
 8004f50:	f7ff ff78 	bl	8004e44 <__sfp_lock_release>
 8004f54:	230c      	movs	r3, #12
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	e7ee      	b.n	8004f38 <__sfp+0x60>
 8004f5a:	bf00      	nop
 8004f5c:	08005ad0 	.word	0x08005ad0
 8004f60:	ffff0001 	.word	0xffff0001

08004f64 <_fwalk_reent>:
 8004f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f68:	4606      	mov	r6, r0
 8004f6a:	4688      	mov	r8, r1
 8004f6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f70:	2700      	movs	r7, #0
 8004f72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f76:	f1b9 0901 	subs.w	r9, r9, #1
 8004f7a:	d505      	bpl.n	8004f88 <_fwalk_reent+0x24>
 8004f7c:	6824      	ldr	r4, [r4, #0]
 8004f7e:	2c00      	cmp	r4, #0
 8004f80:	d1f7      	bne.n	8004f72 <_fwalk_reent+0xe>
 8004f82:	4638      	mov	r0, r7
 8004f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f88:	89ab      	ldrh	r3, [r5, #12]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d907      	bls.n	8004f9e <_fwalk_reent+0x3a>
 8004f8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f92:	3301      	adds	r3, #1
 8004f94:	d003      	beq.n	8004f9e <_fwalk_reent+0x3a>
 8004f96:	4629      	mov	r1, r5
 8004f98:	4630      	mov	r0, r6
 8004f9a:	47c0      	blx	r8
 8004f9c:	4307      	orrs	r7, r0
 8004f9e:	3568      	adds	r5, #104	; 0x68
 8004fa0:	e7e9      	b.n	8004f76 <_fwalk_reent+0x12>

08004fa2 <__retarget_lock_init_recursive>:
 8004fa2:	4770      	bx	lr

08004fa4 <__retarget_lock_acquire_recursive>:
 8004fa4:	4770      	bx	lr

08004fa6 <__retarget_lock_release_recursive>:
 8004fa6:	4770      	bx	lr

08004fa8 <_lseek_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d07      	ldr	r5, [pc, #28]	; (8004fc8 <_lseek_r+0x20>)
 8004fac:	4604      	mov	r4, r0
 8004fae:	4608      	mov	r0, r1
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	602a      	str	r2, [r5, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f7fc f996 	bl	80012e8 <_lseek>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d102      	bne.n	8004fc6 <_lseek_r+0x1e>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	b103      	cbz	r3, 8004fc6 <_lseek_r+0x1e>
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
 8004fc8:	20000384 	.word	0x20000384

08004fcc <__swhatbuf_r>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	460e      	mov	r6, r1
 8004fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd4:	2900      	cmp	r1, #0
 8004fd6:	b096      	sub	sp, #88	; 0x58
 8004fd8:	4614      	mov	r4, r2
 8004fda:	461d      	mov	r5, r3
 8004fdc:	da08      	bge.n	8004ff0 <__swhatbuf_r+0x24>
 8004fde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	602a      	str	r2, [r5, #0]
 8004fe6:	061a      	lsls	r2, r3, #24
 8004fe8:	d410      	bmi.n	800500c <__swhatbuf_r+0x40>
 8004fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fee:	e00e      	b.n	800500e <__swhatbuf_r+0x42>
 8004ff0:	466a      	mov	r2, sp
 8004ff2:	f000 fc79 	bl	80058e8 <_fstat_r>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	dbf1      	blt.n	8004fde <__swhatbuf_r+0x12>
 8004ffa:	9a01      	ldr	r2, [sp, #4]
 8004ffc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005000:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005004:	425a      	negs	r2, r3
 8005006:	415a      	adcs	r2, r3
 8005008:	602a      	str	r2, [r5, #0]
 800500a:	e7ee      	b.n	8004fea <__swhatbuf_r+0x1e>
 800500c:	2340      	movs	r3, #64	; 0x40
 800500e:	2000      	movs	r0, #0
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	b016      	add	sp, #88	; 0x58
 8005014:	bd70      	pop	{r4, r5, r6, pc}
	...

08005018 <__smakebuf_r>:
 8005018:	898b      	ldrh	r3, [r1, #12]
 800501a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800501c:	079d      	lsls	r5, r3, #30
 800501e:	4606      	mov	r6, r0
 8005020:	460c      	mov	r4, r1
 8005022:	d507      	bpl.n	8005034 <__smakebuf_r+0x1c>
 8005024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	6123      	str	r3, [r4, #16]
 800502c:	2301      	movs	r3, #1
 800502e:	6163      	str	r3, [r4, #20]
 8005030:	b002      	add	sp, #8
 8005032:	bd70      	pop	{r4, r5, r6, pc}
 8005034:	ab01      	add	r3, sp, #4
 8005036:	466a      	mov	r2, sp
 8005038:	f7ff ffc8 	bl	8004fcc <__swhatbuf_r>
 800503c:	9900      	ldr	r1, [sp, #0]
 800503e:	4605      	mov	r5, r0
 8005040:	4630      	mov	r0, r6
 8005042:	f7ff fad7 	bl	80045f4 <_malloc_r>
 8005046:	b948      	cbnz	r0, 800505c <__smakebuf_r+0x44>
 8005048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800504c:	059a      	lsls	r2, r3, #22
 800504e:	d4ef      	bmi.n	8005030 <__smakebuf_r+0x18>
 8005050:	f023 0303 	bic.w	r3, r3, #3
 8005054:	f043 0302 	orr.w	r3, r3, #2
 8005058:	81a3      	strh	r3, [r4, #12]
 800505a:	e7e3      	b.n	8005024 <__smakebuf_r+0xc>
 800505c:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <__smakebuf_r+0x7c>)
 800505e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	6020      	str	r0, [r4, #0]
 8005064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005068:	81a3      	strh	r3, [r4, #12]
 800506a:	9b00      	ldr	r3, [sp, #0]
 800506c:	6163      	str	r3, [r4, #20]
 800506e:	9b01      	ldr	r3, [sp, #4]
 8005070:	6120      	str	r0, [r4, #16]
 8005072:	b15b      	cbz	r3, 800508c <__smakebuf_r+0x74>
 8005074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005078:	4630      	mov	r0, r6
 800507a:	f000 fc47 	bl	800590c <_isatty_r>
 800507e:	b128      	cbz	r0, 800508c <__smakebuf_r+0x74>
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	f023 0303 	bic.w	r3, r3, #3
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	81a3      	strh	r3, [r4, #12]
 800508c:	89a0      	ldrh	r0, [r4, #12]
 800508e:	4305      	orrs	r5, r0
 8005090:	81a5      	strh	r5, [r4, #12]
 8005092:	e7cd      	b.n	8005030 <__smakebuf_r+0x18>
 8005094:	08004e01 	.word	0x08004e01

08005098 <__malloc_lock>:
 8005098:	4801      	ldr	r0, [pc, #4]	; (80050a0 <__malloc_lock+0x8>)
 800509a:	f7ff bf83 	b.w	8004fa4 <__retarget_lock_acquire_recursive>
 800509e:	bf00      	nop
 80050a0:	20000380 	.word	0x20000380

080050a4 <__malloc_unlock>:
 80050a4:	4801      	ldr	r0, [pc, #4]	; (80050ac <__malloc_unlock+0x8>)
 80050a6:	f7ff bf7e 	b.w	8004fa6 <__retarget_lock_release_recursive>
 80050aa:	bf00      	nop
 80050ac:	20000380 	.word	0x20000380

080050b0 <_sungetc_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	1c4b      	adds	r3, r1, #1
 80050b4:	4614      	mov	r4, r2
 80050b6:	d103      	bne.n	80050c0 <_sungetc_r+0x10>
 80050b8:	f04f 35ff 	mov.w	r5, #4294967295
 80050bc:	4628      	mov	r0, r5
 80050be:	bd38      	pop	{r3, r4, r5, pc}
 80050c0:	8993      	ldrh	r3, [r2, #12]
 80050c2:	f023 0320 	bic.w	r3, r3, #32
 80050c6:	8193      	strh	r3, [r2, #12]
 80050c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050ca:	6852      	ldr	r2, [r2, #4]
 80050cc:	b2cd      	uxtb	r5, r1
 80050ce:	b18b      	cbz	r3, 80050f4 <_sungetc_r+0x44>
 80050d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050d2:	4293      	cmp	r3, r2
 80050d4:	dd08      	ble.n	80050e8 <_sungetc_r+0x38>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	1e5a      	subs	r2, r3, #1
 80050da:	6022      	str	r2, [r4, #0]
 80050dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80050e0:	6863      	ldr	r3, [r4, #4]
 80050e2:	3301      	adds	r3, #1
 80050e4:	6063      	str	r3, [r4, #4]
 80050e6:	e7e9      	b.n	80050bc <_sungetc_r+0xc>
 80050e8:	4621      	mov	r1, r4
 80050ea:	f000 fbc3 	bl	8005874 <__submore>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0f1      	beq.n	80050d6 <_sungetc_r+0x26>
 80050f2:	e7e1      	b.n	80050b8 <_sungetc_r+0x8>
 80050f4:	6921      	ldr	r1, [r4, #16]
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	b151      	cbz	r1, 8005110 <_sungetc_r+0x60>
 80050fa:	4299      	cmp	r1, r3
 80050fc:	d208      	bcs.n	8005110 <_sungetc_r+0x60>
 80050fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005102:	42a9      	cmp	r1, r5
 8005104:	d104      	bne.n	8005110 <_sungetc_r+0x60>
 8005106:	3b01      	subs	r3, #1
 8005108:	3201      	adds	r2, #1
 800510a:	6023      	str	r3, [r4, #0]
 800510c:	6062      	str	r2, [r4, #4]
 800510e:	e7d5      	b.n	80050bc <_sungetc_r+0xc>
 8005110:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005118:	6363      	str	r3, [r4, #52]	; 0x34
 800511a:	2303      	movs	r3, #3
 800511c:	63a3      	str	r3, [r4, #56]	; 0x38
 800511e:	4623      	mov	r3, r4
 8005120:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	2301      	movs	r3, #1
 8005128:	e7dc      	b.n	80050e4 <_sungetc_r+0x34>

0800512a <__ssrefill_r>:
 800512a:	b510      	push	{r4, lr}
 800512c:	460c      	mov	r4, r1
 800512e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005130:	b169      	cbz	r1, 800514e <__ssrefill_r+0x24>
 8005132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005136:	4299      	cmp	r1, r3
 8005138:	d001      	beq.n	800513e <__ssrefill_r+0x14>
 800513a:	f7ff f9ef 	bl	800451c <_free_r>
 800513e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005140:	6063      	str	r3, [r4, #4]
 8005142:	2000      	movs	r0, #0
 8005144:	6360      	str	r0, [r4, #52]	; 0x34
 8005146:	b113      	cbz	r3, 800514e <__ssrefill_r+0x24>
 8005148:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800514a:	6023      	str	r3, [r4, #0]
 800514c:	bd10      	pop	{r4, pc}
 800514e:	6923      	ldr	r3, [r4, #16]
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	2300      	movs	r3, #0
 8005154:	6063      	str	r3, [r4, #4]
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	f043 0320 	orr.w	r3, r3, #32
 800515c:	81a3      	strh	r3, [r4, #12]
 800515e:	f04f 30ff 	mov.w	r0, #4294967295
 8005162:	e7f3      	b.n	800514c <__ssrefill_r+0x22>

08005164 <__ssvfiscanf_r>:
 8005164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005168:	460c      	mov	r4, r1
 800516a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800516e:	2100      	movs	r1, #0
 8005170:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005174:	49a6      	ldr	r1, [pc, #664]	; (8005410 <__ssvfiscanf_r+0x2ac>)
 8005176:	91a0      	str	r1, [sp, #640]	; 0x280
 8005178:	f10d 0804 	add.w	r8, sp, #4
 800517c:	49a5      	ldr	r1, [pc, #660]	; (8005414 <__ssvfiscanf_r+0x2b0>)
 800517e:	4fa6      	ldr	r7, [pc, #664]	; (8005418 <__ssvfiscanf_r+0x2b4>)
 8005180:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800541c <__ssvfiscanf_r+0x2b8>
 8005184:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005188:	4606      	mov	r6, r0
 800518a:	91a1      	str	r1, [sp, #644]	; 0x284
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	7813      	ldrb	r3, [r2, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 815a 	beq.w	800544a <__ssvfiscanf_r+0x2e6>
 8005196:	5dd9      	ldrb	r1, [r3, r7]
 8005198:	f011 0108 	ands.w	r1, r1, #8
 800519c:	f102 0501 	add.w	r5, r2, #1
 80051a0:	d019      	beq.n	80051d6 <__ssvfiscanf_r+0x72>
 80051a2:	6863      	ldr	r3, [r4, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dd0f      	ble.n	80051c8 <__ssvfiscanf_r+0x64>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	781a      	ldrb	r2, [r3, #0]
 80051ac:	5cba      	ldrb	r2, [r7, r2]
 80051ae:	0712      	lsls	r2, r2, #28
 80051b0:	d401      	bmi.n	80051b6 <__ssvfiscanf_r+0x52>
 80051b2:	462a      	mov	r2, r5
 80051b4:	e7eb      	b.n	800518e <__ssvfiscanf_r+0x2a>
 80051b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80051b8:	3201      	adds	r2, #1
 80051ba:	9245      	str	r2, [sp, #276]	; 0x114
 80051bc:	6862      	ldr	r2, [r4, #4]
 80051be:	3301      	adds	r3, #1
 80051c0:	3a01      	subs	r2, #1
 80051c2:	6062      	str	r2, [r4, #4]
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	e7ec      	b.n	80051a2 <__ssvfiscanf_r+0x3e>
 80051c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80051ca:	4621      	mov	r1, r4
 80051cc:	4630      	mov	r0, r6
 80051ce:	4798      	blx	r3
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d0e9      	beq.n	80051a8 <__ssvfiscanf_r+0x44>
 80051d4:	e7ed      	b.n	80051b2 <__ssvfiscanf_r+0x4e>
 80051d6:	2b25      	cmp	r3, #37	; 0x25
 80051d8:	d012      	beq.n	8005200 <__ssvfiscanf_r+0x9c>
 80051da:	469a      	mov	sl, r3
 80051dc:	6863      	ldr	r3, [r4, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f340 8091 	ble.w	8005306 <__ssvfiscanf_r+0x1a2>
 80051e4:	6822      	ldr	r2, [r4, #0]
 80051e6:	7813      	ldrb	r3, [r2, #0]
 80051e8:	4553      	cmp	r3, sl
 80051ea:	f040 812e 	bne.w	800544a <__ssvfiscanf_r+0x2e6>
 80051ee:	6863      	ldr	r3, [r4, #4]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	6063      	str	r3, [r4, #4]
 80051f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80051f6:	3201      	adds	r2, #1
 80051f8:	3301      	adds	r3, #1
 80051fa:	6022      	str	r2, [r4, #0]
 80051fc:	9345      	str	r3, [sp, #276]	; 0x114
 80051fe:	e7d8      	b.n	80051b2 <__ssvfiscanf_r+0x4e>
 8005200:	9141      	str	r1, [sp, #260]	; 0x104
 8005202:	9143      	str	r1, [sp, #268]	; 0x10c
 8005204:	7853      	ldrb	r3, [r2, #1]
 8005206:	2b2a      	cmp	r3, #42	; 0x2a
 8005208:	bf02      	ittt	eq
 800520a:	2310      	moveq	r3, #16
 800520c:	1c95      	addeq	r5, r2, #2
 800520e:	9341      	streq	r3, [sp, #260]	; 0x104
 8005210:	220a      	movs	r2, #10
 8005212:	46aa      	mov	sl, r5
 8005214:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005218:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800521c:	2b09      	cmp	r3, #9
 800521e:	d91d      	bls.n	800525c <__ssvfiscanf_r+0xf8>
 8005220:	487e      	ldr	r0, [pc, #504]	; (800541c <__ssvfiscanf_r+0x2b8>)
 8005222:	2203      	movs	r2, #3
 8005224:	f7fa ffec 	bl	8000200 <memchr>
 8005228:	b140      	cbz	r0, 800523c <__ssvfiscanf_r+0xd8>
 800522a:	2301      	movs	r3, #1
 800522c:	eba0 0009 	sub.w	r0, r0, r9
 8005230:	fa03 f000 	lsl.w	r0, r3, r0
 8005234:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005236:	4318      	orrs	r0, r3
 8005238:	9041      	str	r0, [sp, #260]	; 0x104
 800523a:	4655      	mov	r5, sl
 800523c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005240:	2b78      	cmp	r3, #120	; 0x78
 8005242:	d806      	bhi.n	8005252 <__ssvfiscanf_r+0xee>
 8005244:	2b57      	cmp	r3, #87	; 0x57
 8005246:	d810      	bhi.n	800526a <__ssvfiscanf_r+0x106>
 8005248:	2b25      	cmp	r3, #37	; 0x25
 800524a:	d0c6      	beq.n	80051da <__ssvfiscanf_r+0x76>
 800524c:	d856      	bhi.n	80052fc <__ssvfiscanf_r+0x198>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d064      	beq.n	800531c <__ssvfiscanf_r+0x1b8>
 8005252:	2303      	movs	r3, #3
 8005254:	9347      	str	r3, [sp, #284]	; 0x11c
 8005256:	230a      	movs	r3, #10
 8005258:	9342      	str	r3, [sp, #264]	; 0x108
 800525a:	e071      	b.n	8005340 <__ssvfiscanf_r+0x1dc>
 800525c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800525e:	fb02 1103 	mla	r1, r2, r3, r1
 8005262:	3930      	subs	r1, #48	; 0x30
 8005264:	9143      	str	r1, [sp, #268]	; 0x10c
 8005266:	4655      	mov	r5, sl
 8005268:	e7d3      	b.n	8005212 <__ssvfiscanf_r+0xae>
 800526a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800526e:	2a20      	cmp	r2, #32
 8005270:	d8ef      	bhi.n	8005252 <__ssvfiscanf_r+0xee>
 8005272:	a101      	add	r1, pc, #4	; (adr r1, 8005278 <__ssvfiscanf_r+0x114>)
 8005274:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005278:	0800532b 	.word	0x0800532b
 800527c:	08005253 	.word	0x08005253
 8005280:	08005253 	.word	0x08005253
 8005284:	08005389 	.word	0x08005389
 8005288:	08005253 	.word	0x08005253
 800528c:	08005253 	.word	0x08005253
 8005290:	08005253 	.word	0x08005253
 8005294:	08005253 	.word	0x08005253
 8005298:	08005253 	.word	0x08005253
 800529c:	08005253 	.word	0x08005253
 80052a0:	08005253 	.word	0x08005253
 80052a4:	0800539f 	.word	0x0800539f
 80052a8:	08005375 	.word	0x08005375
 80052ac:	08005303 	.word	0x08005303
 80052b0:	08005303 	.word	0x08005303
 80052b4:	08005303 	.word	0x08005303
 80052b8:	08005253 	.word	0x08005253
 80052bc:	08005379 	.word	0x08005379
 80052c0:	08005253 	.word	0x08005253
 80052c4:	08005253 	.word	0x08005253
 80052c8:	08005253 	.word	0x08005253
 80052cc:	08005253 	.word	0x08005253
 80052d0:	080053af 	.word	0x080053af
 80052d4:	08005381 	.word	0x08005381
 80052d8:	08005323 	.word	0x08005323
 80052dc:	08005253 	.word	0x08005253
 80052e0:	08005253 	.word	0x08005253
 80052e4:	080053ab 	.word	0x080053ab
 80052e8:	08005253 	.word	0x08005253
 80052ec:	08005375 	.word	0x08005375
 80052f0:	08005253 	.word	0x08005253
 80052f4:	08005253 	.word	0x08005253
 80052f8:	0800532b 	.word	0x0800532b
 80052fc:	3b45      	subs	r3, #69	; 0x45
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d8a7      	bhi.n	8005252 <__ssvfiscanf_r+0xee>
 8005302:	2305      	movs	r3, #5
 8005304:	e01b      	b.n	800533e <__ssvfiscanf_r+0x1da>
 8005306:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005308:	4621      	mov	r1, r4
 800530a:	4630      	mov	r0, r6
 800530c:	4798      	blx	r3
 800530e:	2800      	cmp	r0, #0
 8005310:	f43f af68 	beq.w	80051e4 <__ssvfiscanf_r+0x80>
 8005314:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005316:	2800      	cmp	r0, #0
 8005318:	f040 808d 	bne.w	8005436 <__ssvfiscanf_r+0x2d2>
 800531c:	f04f 30ff 	mov.w	r0, #4294967295
 8005320:	e08f      	b.n	8005442 <__ssvfiscanf_r+0x2de>
 8005322:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005324:	f042 0220 	orr.w	r2, r2, #32
 8005328:	9241      	str	r2, [sp, #260]	; 0x104
 800532a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800532c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005330:	9241      	str	r2, [sp, #260]	; 0x104
 8005332:	2210      	movs	r2, #16
 8005334:	2b6f      	cmp	r3, #111	; 0x6f
 8005336:	9242      	str	r2, [sp, #264]	; 0x108
 8005338:	bf34      	ite	cc
 800533a:	2303      	movcc	r3, #3
 800533c:	2304      	movcs	r3, #4
 800533e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005340:	6863      	ldr	r3, [r4, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	dd42      	ble.n	80053cc <__ssvfiscanf_r+0x268>
 8005346:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005348:	0659      	lsls	r1, r3, #25
 800534a:	d404      	bmi.n	8005356 <__ssvfiscanf_r+0x1f2>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	781a      	ldrb	r2, [r3, #0]
 8005350:	5cba      	ldrb	r2, [r7, r2]
 8005352:	0712      	lsls	r2, r2, #28
 8005354:	d441      	bmi.n	80053da <__ssvfiscanf_r+0x276>
 8005356:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005358:	2b02      	cmp	r3, #2
 800535a:	dc50      	bgt.n	80053fe <__ssvfiscanf_r+0x29a>
 800535c:	466b      	mov	r3, sp
 800535e:	4622      	mov	r2, r4
 8005360:	a941      	add	r1, sp, #260	; 0x104
 8005362:	4630      	mov	r0, r6
 8005364:	f000 f876 	bl	8005454 <_scanf_chars>
 8005368:	2801      	cmp	r0, #1
 800536a:	d06e      	beq.n	800544a <__ssvfiscanf_r+0x2e6>
 800536c:	2802      	cmp	r0, #2
 800536e:	f47f af20 	bne.w	80051b2 <__ssvfiscanf_r+0x4e>
 8005372:	e7cf      	b.n	8005314 <__ssvfiscanf_r+0x1b0>
 8005374:	220a      	movs	r2, #10
 8005376:	e7dd      	b.n	8005334 <__ssvfiscanf_r+0x1d0>
 8005378:	2300      	movs	r3, #0
 800537a:	9342      	str	r3, [sp, #264]	; 0x108
 800537c:	2303      	movs	r3, #3
 800537e:	e7de      	b.n	800533e <__ssvfiscanf_r+0x1da>
 8005380:	2308      	movs	r3, #8
 8005382:	9342      	str	r3, [sp, #264]	; 0x108
 8005384:	2304      	movs	r3, #4
 8005386:	e7da      	b.n	800533e <__ssvfiscanf_r+0x1da>
 8005388:	4629      	mov	r1, r5
 800538a:	4640      	mov	r0, r8
 800538c:	f000 f9c6 	bl	800571c <__sccl>
 8005390:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005396:	9341      	str	r3, [sp, #260]	; 0x104
 8005398:	4605      	mov	r5, r0
 800539a:	2301      	movs	r3, #1
 800539c:	e7cf      	b.n	800533e <__ssvfiscanf_r+0x1da>
 800539e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80053a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053a4:	9341      	str	r3, [sp, #260]	; 0x104
 80053a6:	2300      	movs	r3, #0
 80053a8:	e7c9      	b.n	800533e <__ssvfiscanf_r+0x1da>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e7c7      	b.n	800533e <__ssvfiscanf_r+0x1da>
 80053ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 80053b0:	06c3      	lsls	r3, r0, #27
 80053b2:	f53f aefe 	bmi.w	80051b2 <__ssvfiscanf_r+0x4e>
 80053b6:	9b00      	ldr	r3, [sp, #0]
 80053b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80053ba:	1d19      	adds	r1, r3, #4
 80053bc:	9100      	str	r1, [sp, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f010 0f01 	tst.w	r0, #1
 80053c4:	bf14      	ite	ne
 80053c6:	801a      	strhne	r2, [r3, #0]
 80053c8:	601a      	streq	r2, [r3, #0]
 80053ca:	e6f2      	b.n	80051b2 <__ssvfiscanf_r+0x4e>
 80053cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80053ce:	4621      	mov	r1, r4
 80053d0:	4630      	mov	r0, r6
 80053d2:	4798      	blx	r3
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d0b6      	beq.n	8005346 <__ssvfiscanf_r+0x1e2>
 80053d8:	e79c      	b.n	8005314 <__ssvfiscanf_r+0x1b0>
 80053da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80053dc:	3201      	adds	r2, #1
 80053de:	9245      	str	r2, [sp, #276]	; 0x114
 80053e0:	6862      	ldr	r2, [r4, #4]
 80053e2:	3a01      	subs	r2, #1
 80053e4:	2a00      	cmp	r2, #0
 80053e6:	6062      	str	r2, [r4, #4]
 80053e8:	dd02      	ble.n	80053f0 <__ssvfiscanf_r+0x28c>
 80053ea:	3301      	adds	r3, #1
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	e7ad      	b.n	800534c <__ssvfiscanf_r+0x1e8>
 80053f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80053f2:	4621      	mov	r1, r4
 80053f4:	4630      	mov	r0, r6
 80053f6:	4798      	blx	r3
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d0a7      	beq.n	800534c <__ssvfiscanf_r+0x1e8>
 80053fc:	e78a      	b.n	8005314 <__ssvfiscanf_r+0x1b0>
 80053fe:	2b04      	cmp	r3, #4
 8005400:	dc0e      	bgt.n	8005420 <__ssvfiscanf_r+0x2bc>
 8005402:	466b      	mov	r3, sp
 8005404:	4622      	mov	r2, r4
 8005406:	a941      	add	r1, sp, #260	; 0x104
 8005408:	4630      	mov	r0, r6
 800540a:	f000 f87d 	bl	8005508 <_scanf_i>
 800540e:	e7ab      	b.n	8005368 <__ssvfiscanf_r+0x204>
 8005410:	080050b1 	.word	0x080050b1
 8005414:	0800512b 	.word	0x0800512b
 8005418:	08005ad5 	.word	0x08005ad5
 800541c:	08005c38 	.word	0x08005c38
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <__ssvfiscanf_r+0x2ec>)
 8005422:	2b00      	cmp	r3, #0
 8005424:	f43f aec5 	beq.w	80051b2 <__ssvfiscanf_r+0x4e>
 8005428:	466b      	mov	r3, sp
 800542a:	4622      	mov	r2, r4
 800542c:	a941      	add	r1, sp, #260	; 0x104
 800542e:	4630      	mov	r0, r6
 8005430:	f3af 8000 	nop.w
 8005434:	e798      	b.n	8005368 <__ssvfiscanf_r+0x204>
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	f013 0f40 	tst.w	r3, #64	; 0x40
 800543c:	bf18      	it	ne
 800543e:	f04f 30ff 	movne.w	r0, #4294967295
 8005442:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800544a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800544c:	e7f9      	b.n	8005442 <__ssvfiscanf_r+0x2de>
 800544e:	bf00      	nop
 8005450:	00000000 	.word	0x00000000

08005454 <_scanf_chars>:
 8005454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005458:	4615      	mov	r5, r2
 800545a:	688a      	ldr	r2, [r1, #8]
 800545c:	4680      	mov	r8, r0
 800545e:	460c      	mov	r4, r1
 8005460:	b932      	cbnz	r2, 8005470 <_scanf_chars+0x1c>
 8005462:	698a      	ldr	r2, [r1, #24]
 8005464:	2a00      	cmp	r2, #0
 8005466:	bf0c      	ite	eq
 8005468:	2201      	moveq	r2, #1
 800546a:	f04f 32ff 	movne.w	r2, #4294967295
 800546e:	608a      	str	r2, [r1, #8]
 8005470:	6822      	ldr	r2, [r4, #0]
 8005472:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005504 <_scanf_chars+0xb0>
 8005476:	06d1      	lsls	r1, r2, #27
 8005478:	bf5f      	itttt	pl
 800547a:	681a      	ldrpl	r2, [r3, #0]
 800547c:	1d11      	addpl	r1, r2, #4
 800547e:	6019      	strpl	r1, [r3, #0]
 8005480:	6816      	ldrpl	r6, [r2, #0]
 8005482:	2700      	movs	r7, #0
 8005484:	69a0      	ldr	r0, [r4, #24]
 8005486:	b188      	cbz	r0, 80054ac <_scanf_chars+0x58>
 8005488:	2801      	cmp	r0, #1
 800548a:	d107      	bne.n	800549c <_scanf_chars+0x48>
 800548c:	682a      	ldr	r2, [r5, #0]
 800548e:	7811      	ldrb	r1, [r2, #0]
 8005490:	6962      	ldr	r2, [r4, #20]
 8005492:	5c52      	ldrb	r2, [r2, r1]
 8005494:	b952      	cbnz	r2, 80054ac <_scanf_chars+0x58>
 8005496:	2f00      	cmp	r7, #0
 8005498:	d031      	beq.n	80054fe <_scanf_chars+0xaa>
 800549a:	e022      	b.n	80054e2 <_scanf_chars+0x8e>
 800549c:	2802      	cmp	r0, #2
 800549e:	d120      	bne.n	80054e2 <_scanf_chars+0x8e>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80054a8:	071b      	lsls	r3, r3, #28
 80054aa:	d41a      	bmi.n	80054e2 <_scanf_chars+0x8e>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	06da      	lsls	r2, r3, #27
 80054b0:	bf5e      	ittt	pl
 80054b2:	682b      	ldrpl	r3, [r5, #0]
 80054b4:	781b      	ldrbpl	r3, [r3, #0]
 80054b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80054ba:	682a      	ldr	r2, [r5, #0]
 80054bc:	686b      	ldr	r3, [r5, #4]
 80054be:	3201      	adds	r2, #1
 80054c0:	602a      	str	r2, [r5, #0]
 80054c2:	68a2      	ldr	r2, [r4, #8]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	3a01      	subs	r2, #1
 80054c8:	606b      	str	r3, [r5, #4]
 80054ca:	3701      	adds	r7, #1
 80054cc:	60a2      	str	r2, [r4, #8]
 80054ce:	b142      	cbz	r2, 80054e2 <_scanf_chars+0x8e>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	dcd7      	bgt.n	8005484 <_scanf_chars+0x30>
 80054d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80054d8:	4629      	mov	r1, r5
 80054da:	4640      	mov	r0, r8
 80054dc:	4798      	blx	r3
 80054de:	2800      	cmp	r0, #0
 80054e0:	d0d0      	beq.n	8005484 <_scanf_chars+0x30>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	f013 0310 	ands.w	r3, r3, #16
 80054e8:	d105      	bne.n	80054f6 <_scanf_chars+0xa2>
 80054ea:	68e2      	ldr	r2, [r4, #12]
 80054ec:	3201      	adds	r2, #1
 80054ee:	60e2      	str	r2, [r4, #12]
 80054f0:	69a2      	ldr	r2, [r4, #24]
 80054f2:	b102      	cbz	r2, 80054f6 <_scanf_chars+0xa2>
 80054f4:	7033      	strb	r3, [r6, #0]
 80054f6:	6923      	ldr	r3, [r4, #16]
 80054f8:	443b      	add	r3, r7
 80054fa:	6123      	str	r3, [r4, #16]
 80054fc:	2000      	movs	r0, #0
 80054fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005502:	bf00      	nop
 8005504:	08005ad5 	.word	0x08005ad5

08005508 <_scanf_i>:
 8005508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550c:	4698      	mov	r8, r3
 800550e:	4b76      	ldr	r3, [pc, #472]	; (80056e8 <_scanf_i+0x1e0>)
 8005510:	460c      	mov	r4, r1
 8005512:	4682      	mov	sl, r0
 8005514:	4616      	mov	r6, r2
 8005516:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800551a:	b087      	sub	sp, #28
 800551c:	ab03      	add	r3, sp, #12
 800551e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005522:	4b72      	ldr	r3, [pc, #456]	; (80056ec <_scanf_i+0x1e4>)
 8005524:	69a1      	ldr	r1, [r4, #24]
 8005526:	4a72      	ldr	r2, [pc, #456]	; (80056f0 <_scanf_i+0x1e8>)
 8005528:	2903      	cmp	r1, #3
 800552a:	bf18      	it	ne
 800552c:	461a      	movne	r2, r3
 800552e:	68a3      	ldr	r3, [r4, #8]
 8005530:	9201      	str	r2, [sp, #4]
 8005532:	1e5a      	subs	r2, r3, #1
 8005534:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005538:	bf88      	it	hi
 800553a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800553e:	4627      	mov	r7, r4
 8005540:	bf82      	ittt	hi
 8005542:	eb03 0905 	addhi.w	r9, r3, r5
 8005546:	f240 135d 	movwhi	r3, #349	; 0x15d
 800554a:	60a3      	strhi	r3, [r4, #8]
 800554c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005550:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005554:	bf98      	it	ls
 8005556:	f04f 0900 	movls.w	r9, #0
 800555a:	6023      	str	r3, [r4, #0]
 800555c:	463d      	mov	r5, r7
 800555e:	f04f 0b00 	mov.w	fp, #0
 8005562:	6831      	ldr	r1, [r6, #0]
 8005564:	ab03      	add	r3, sp, #12
 8005566:	7809      	ldrb	r1, [r1, #0]
 8005568:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800556c:	2202      	movs	r2, #2
 800556e:	f7fa fe47 	bl	8000200 <memchr>
 8005572:	b328      	cbz	r0, 80055c0 <_scanf_i+0xb8>
 8005574:	f1bb 0f01 	cmp.w	fp, #1
 8005578:	d159      	bne.n	800562e <_scanf_i+0x126>
 800557a:	6862      	ldr	r2, [r4, #4]
 800557c:	b92a      	cbnz	r2, 800558a <_scanf_i+0x82>
 800557e:	6822      	ldr	r2, [r4, #0]
 8005580:	2308      	movs	r3, #8
 8005582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005586:	6063      	str	r3, [r4, #4]
 8005588:	6022      	str	r2, [r4, #0]
 800558a:	6822      	ldr	r2, [r4, #0]
 800558c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005590:	6022      	str	r2, [r4, #0]
 8005592:	68a2      	ldr	r2, [r4, #8]
 8005594:	1e51      	subs	r1, r2, #1
 8005596:	60a1      	str	r1, [r4, #8]
 8005598:	b192      	cbz	r2, 80055c0 <_scanf_i+0xb8>
 800559a:	6832      	ldr	r2, [r6, #0]
 800559c:	1c51      	adds	r1, r2, #1
 800559e:	6031      	str	r1, [r6, #0]
 80055a0:	7812      	ldrb	r2, [r2, #0]
 80055a2:	f805 2b01 	strb.w	r2, [r5], #1
 80055a6:	6872      	ldr	r2, [r6, #4]
 80055a8:	3a01      	subs	r2, #1
 80055aa:	2a00      	cmp	r2, #0
 80055ac:	6072      	str	r2, [r6, #4]
 80055ae:	dc07      	bgt.n	80055c0 <_scanf_i+0xb8>
 80055b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80055b4:	4631      	mov	r1, r6
 80055b6:	4650      	mov	r0, sl
 80055b8:	4790      	blx	r2
 80055ba:	2800      	cmp	r0, #0
 80055bc:	f040 8085 	bne.w	80056ca <_scanf_i+0x1c2>
 80055c0:	f10b 0b01 	add.w	fp, fp, #1
 80055c4:	f1bb 0f03 	cmp.w	fp, #3
 80055c8:	d1cb      	bne.n	8005562 <_scanf_i+0x5a>
 80055ca:	6863      	ldr	r3, [r4, #4]
 80055cc:	b90b      	cbnz	r3, 80055d2 <_scanf_i+0xca>
 80055ce:	230a      	movs	r3, #10
 80055d0:	6063      	str	r3, [r4, #4]
 80055d2:	6863      	ldr	r3, [r4, #4]
 80055d4:	4947      	ldr	r1, [pc, #284]	; (80056f4 <_scanf_i+0x1ec>)
 80055d6:	6960      	ldr	r0, [r4, #20]
 80055d8:	1ac9      	subs	r1, r1, r3
 80055da:	f000 f89f 	bl	800571c <__sccl>
 80055de:	f04f 0b00 	mov.w	fp, #0
 80055e2:	68a3      	ldr	r3, [r4, #8]
 80055e4:	6822      	ldr	r2, [r4, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d03d      	beq.n	8005666 <_scanf_i+0x15e>
 80055ea:	6831      	ldr	r1, [r6, #0]
 80055ec:	6960      	ldr	r0, [r4, #20]
 80055ee:	f891 c000 	ldrb.w	ip, [r1]
 80055f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d035      	beq.n	8005666 <_scanf_i+0x15e>
 80055fa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80055fe:	d124      	bne.n	800564a <_scanf_i+0x142>
 8005600:	0510      	lsls	r0, r2, #20
 8005602:	d522      	bpl.n	800564a <_scanf_i+0x142>
 8005604:	f10b 0b01 	add.w	fp, fp, #1
 8005608:	f1b9 0f00 	cmp.w	r9, #0
 800560c:	d003      	beq.n	8005616 <_scanf_i+0x10e>
 800560e:	3301      	adds	r3, #1
 8005610:	f109 39ff 	add.w	r9, r9, #4294967295
 8005614:	60a3      	str	r3, [r4, #8]
 8005616:	6873      	ldr	r3, [r6, #4]
 8005618:	3b01      	subs	r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	6073      	str	r3, [r6, #4]
 800561e:	dd1b      	ble.n	8005658 <_scanf_i+0x150>
 8005620:	6833      	ldr	r3, [r6, #0]
 8005622:	3301      	adds	r3, #1
 8005624:	6033      	str	r3, [r6, #0]
 8005626:	68a3      	ldr	r3, [r4, #8]
 8005628:	3b01      	subs	r3, #1
 800562a:	60a3      	str	r3, [r4, #8]
 800562c:	e7d9      	b.n	80055e2 <_scanf_i+0xda>
 800562e:	f1bb 0f02 	cmp.w	fp, #2
 8005632:	d1ae      	bne.n	8005592 <_scanf_i+0x8a>
 8005634:	6822      	ldr	r2, [r4, #0]
 8005636:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800563a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800563e:	d1bf      	bne.n	80055c0 <_scanf_i+0xb8>
 8005640:	2310      	movs	r3, #16
 8005642:	6063      	str	r3, [r4, #4]
 8005644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005648:	e7a2      	b.n	8005590 <_scanf_i+0x88>
 800564a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800564e:	6022      	str	r2, [r4, #0]
 8005650:	780b      	ldrb	r3, [r1, #0]
 8005652:	f805 3b01 	strb.w	r3, [r5], #1
 8005656:	e7de      	b.n	8005616 <_scanf_i+0x10e>
 8005658:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800565c:	4631      	mov	r1, r6
 800565e:	4650      	mov	r0, sl
 8005660:	4798      	blx	r3
 8005662:	2800      	cmp	r0, #0
 8005664:	d0df      	beq.n	8005626 <_scanf_i+0x11e>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	05db      	lsls	r3, r3, #23
 800566a:	d50d      	bpl.n	8005688 <_scanf_i+0x180>
 800566c:	42bd      	cmp	r5, r7
 800566e:	d909      	bls.n	8005684 <_scanf_i+0x17c>
 8005670:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005674:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005678:	4632      	mov	r2, r6
 800567a:	4650      	mov	r0, sl
 800567c:	4798      	blx	r3
 800567e:	f105 39ff 	add.w	r9, r5, #4294967295
 8005682:	464d      	mov	r5, r9
 8005684:	42bd      	cmp	r5, r7
 8005686:	d02d      	beq.n	80056e4 <_scanf_i+0x1dc>
 8005688:	6822      	ldr	r2, [r4, #0]
 800568a:	f012 0210 	ands.w	r2, r2, #16
 800568e:	d113      	bne.n	80056b8 <_scanf_i+0x1b0>
 8005690:	702a      	strb	r2, [r5, #0]
 8005692:	6863      	ldr	r3, [r4, #4]
 8005694:	9e01      	ldr	r6, [sp, #4]
 8005696:	4639      	mov	r1, r7
 8005698:	4650      	mov	r0, sl
 800569a:	47b0      	blx	r6
 800569c:	6821      	ldr	r1, [r4, #0]
 800569e:	f8d8 3000 	ldr.w	r3, [r8]
 80056a2:	f011 0f20 	tst.w	r1, #32
 80056a6:	d013      	beq.n	80056d0 <_scanf_i+0x1c8>
 80056a8:	1d1a      	adds	r2, r3, #4
 80056aa:	f8c8 2000 	str.w	r2, [r8]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6018      	str	r0, [r3, #0]
 80056b2:	68e3      	ldr	r3, [r4, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	60e3      	str	r3, [r4, #12]
 80056b8:	1bed      	subs	r5, r5, r7
 80056ba:	44ab      	add	fp, r5
 80056bc:	6925      	ldr	r5, [r4, #16]
 80056be:	445d      	add	r5, fp
 80056c0:	6125      	str	r5, [r4, #16]
 80056c2:	2000      	movs	r0, #0
 80056c4:	b007      	add	sp, #28
 80056c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ca:	f04f 0b00 	mov.w	fp, #0
 80056ce:	e7ca      	b.n	8005666 <_scanf_i+0x15e>
 80056d0:	1d1a      	adds	r2, r3, #4
 80056d2:	f8c8 2000 	str.w	r2, [r8]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f011 0f01 	tst.w	r1, #1
 80056dc:	bf14      	ite	ne
 80056de:	8018      	strhne	r0, [r3, #0]
 80056e0:	6018      	streq	r0, [r3, #0]
 80056e2:	e7e6      	b.n	80056b2 <_scanf_i+0x1aa>
 80056e4:	2001      	movs	r0, #1
 80056e6:	e7ed      	b.n	80056c4 <_scanf_i+0x1bc>
 80056e8:	08005a18 	.word	0x08005a18
 80056ec:	08005871 	.word	0x08005871
 80056f0:	08004a59 	.word	0x08004a59
 80056f4:	08005c55 	.word	0x08005c55

080056f8 <_read_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4d07      	ldr	r5, [pc, #28]	; (8005718 <_read_r+0x20>)
 80056fc:	4604      	mov	r4, r0
 80056fe:	4608      	mov	r0, r1
 8005700:	4611      	mov	r1, r2
 8005702:	2200      	movs	r2, #0
 8005704:	602a      	str	r2, [r5, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	f7fb fdaa 	bl	8001260 <_read>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d102      	bne.n	8005716 <_read_r+0x1e>
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	b103      	cbz	r3, 8005716 <_read_r+0x1e>
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	20000384 	.word	0x20000384

0800571c <__sccl>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	780b      	ldrb	r3, [r1, #0]
 8005720:	4604      	mov	r4, r0
 8005722:	2b5e      	cmp	r3, #94	; 0x5e
 8005724:	bf0b      	itete	eq
 8005726:	784b      	ldrbeq	r3, [r1, #1]
 8005728:	1c48      	addne	r0, r1, #1
 800572a:	1c88      	addeq	r0, r1, #2
 800572c:	2200      	movne	r2, #0
 800572e:	bf08      	it	eq
 8005730:	2201      	moveq	r2, #1
 8005732:	1e61      	subs	r1, r4, #1
 8005734:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005738:	f801 2f01 	strb.w	r2, [r1, #1]!
 800573c:	42a9      	cmp	r1, r5
 800573e:	d1fb      	bne.n	8005738 <__sccl+0x1c>
 8005740:	b90b      	cbnz	r3, 8005746 <__sccl+0x2a>
 8005742:	3801      	subs	r0, #1
 8005744:	bd70      	pop	{r4, r5, r6, pc}
 8005746:	f082 0201 	eor.w	r2, r2, #1
 800574a:	54e2      	strb	r2, [r4, r3]
 800574c:	4605      	mov	r5, r0
 800574e:	4628      	mov	r0, r5
 8005750:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005754:	292d      	cmp	r1, #45	; 0x2d
 8005756:	d006      	beq.n	8005766 <__sccl+0x4a>
 8005758:	295d      	cmp	r1, #93	; 0x5d
 800575a:	d0f3      	beq.n	8005744 <__sccl+0x28>
 800575c:	b909      	cbnz	r1, 8005762 <__sccl+0x46>
 800575e:	4628      	mov	r0, r5
 8005760:	e7f0      	b.n	8005744 <__sccl+0x28>
 8005762:	460b      	mov	r3, r1
 8005764:	e7f1      	b.n	800574a <__sccl+0x2e>
 8005766:	786e      	ldrb	r6, [r5, #1]
 8005768:	2e5d      	cmp	r6, #93	; 0x5d
 800576a:	d0fa      	beq.n	8005762 <__sccl+0x46>
 800576c:	42b3      	cmp	r3, r6
 800576e:	dcf8      	bgt.n	8005762 <__sccl+0x46>
 8005770:	3502      	adds	r5, #2
 8005772:	4619      	mov	r1, r3
 8005774:	3101      	adds	r1, #1
 8005776:	428e      	cmp	r6, r1
 8005778:	5462      	strb	r2, [r4, r1]
 800577a:	dcfb      	bgt.n	8005774 <__sccl+0x58>
 800577c:	1af1      	subs	r1, r6, r3
 800577e:	3901      	subs	r1, #1
 8005780:	1c58      	adds	r0, r3, #1
 8005782:	42b3      	cmp	r3, r6
 8005784:	bfa8      	it	ge
 8005786:	2100      	movge	r1, #0
 8005788:	1843      	adds	r3, r0, r1
 800578a:	e7e0      	b.n	800574e <__sccl+0x32>

0800578c <_strtoul_l.constprop.0>:
 800578c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005790:	4f36      	ldr	r7, [pc, #216]	; (800586c <_strtoul_l.constprop.0+0xe0>)
 8005792:	4686      	mov	lr, r0
 8005794:	460d      	mov	r5, r1
 8005796:	4628      	mov	r0, r5
 8005798:	f815 4b01 	ldrb.w	r4, [r5], #1
 800579c:	5de6      	ldrb	r6, [r4, r7]
 800579e:	f016 0608 	ands.w	r6, r6, #8
 80057a2:	d1f8      	bne.n	8005796 <_strtoul_l.constprop.0+0xa>
 80057a4:	2c2d      	cmp	r4, #45	; 0x2d
 80057a6:	d12f      	bne.n	8005808 <_strtoul_l.constprop.0+0x7c>
 80057a8:	782c      	ldrb	r4, [r5, #0]
 80057aa:	2601      	movs	r6, #1
 80057ac:	1c85      	adds	r5, r0, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d057      	beq.n	8005862 <_strtoul_l.constprop.0+0xd6>
 80057b2:	2b10      	cmp	r3, #16
 80057b4:	d109      	bne.n	80057ca <_strtoul_l.constprop.0+0x3e>
 80057b6:	2c30      	cmp	r4, #48	; 0x30
 80057b8:	d107      	bne.n	80057ca <_strtoul_l.constprop.0+0x3e>
 80057ba:	7828      	ldrb	r0, [r5, #0]
 80057bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80057c0:	2858      	cmp	r0, #88	; 0x58
 80057c2:	d149      	bne.n	8005858 <_strtoul_l.constprop.0+0xcc>
 80057c4:	786c      	ldrb	r4, [r5, #1]
 80057c6:	2310      	movs	r3, #16
 80057c8:	3502      	adds	r5, #2
 80057ca:	f04f 38ff 	mov.w	r8, #4294967295
 80057ce:	2700      	movs	r7, #0
 80057d0:	fbb8 f8f3 	udiv	r8, r8, r3
 80057d4:	fb03 f908 	mul.w	r9, r3, r8
 80057d8:	ea6f 0909 	mvn.w	r9, r9
 80057dc:	4638      	mov	r0, r7
 80057de:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80057e2:	f1bc 0f09 	cmp.w	ip, #9
 80057e6:	d814      	bhi.n	8005812 <_strtoul_l.constprop.0+0x86>
 80057e8:	4664      	mov	r4, ip
 80057ea:	42a3      	cmp	r3, r4
 80057ec:	dd22      	ble.n	8005834 <_strtoul_l.constprop.0+0xa8>
 80057ee:	2f00      	cmp	r7, #0
 80057f0:	db1d      	blt.n	800582e <_strtoul_l.constprop.0+0xa2>
 80057f2:	4580      	cmp	r8, r0
 80057f4:	d31b      	bcc.n	800582e <_strtoul_l.constprop.0+0xa2>
 80057f6:	d101      	bne.n	80057fc <_strtoul_l.constprop.0+0x70>
 80057f8:	45a1      	cmp	r9, r4
 80057fa:	db18      	blt.n	800582e <_strtoul_l.constprop.0+0xa2>
 80057fc:	fb00 4003 	mla	r0, r0, r3, r4
 8005800:	2701      	movs	r7, #1
 8005802:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005806:	e7ea      	b.n	80057de <_strtoul_l.constprop.0+0x52>
 8005808:	2c2b      	cmp	r4, #43	; 0x2b
 800580a:	bf04      	itt	eq
 800580c:	782c      	ldrbeq	r4, [r5, #0]
 800580e:	1c85      	addeq	r5, r0, #2
 8005810:	e7cd      	b.n	80057ae <_strtoul_l.constprop.0+0x22>
 8005812:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005816:	f1bc 0f19 	cmp.w	ip, #25
 800581a:	d801      	bhi.n	8005820 <_strtoul_l.constprop.0+0x94>
 800581c:	3c37      	subs	r4, #55	; 0x37
 800581e:	e7e4      	b.n	80057ea <_strtoul_l.constprop.0+0x5e>
 8005820:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005824:	f1bc 0f19 	cmp.w	ip, #25
 8005828:	d804      	bhi.n	8005834 <_strtoul_l.constprop.0+0xa8>
 800582a:	3c57      	subs	r4, #87	; 0x57
 800582c:	e7dd      	b.n	80057ea <_strtoul_l.constprop.0+0x5e>
 800582e:	f04f 37ff 	mov.w	r7, #4294967295
 8005832:	e7e6      	b.n	8005802 <_strtoul_l.constprop.0+0x76>
 8005834:	2f00      	cmp	r7, #0
 8005836:	da07      	bge.n	8005848 <_strtoul_l.constprop.0+0xbc>
 8005838:	2322      	movs	r3, #34	; 0x22
 800583a:	f8ce 3000 	str.w	r3, [lr]
 800583e:	f04f 30ff 	mov.w	r0, #4294967295
 8005842:	b932      	cbnz	r2, 8005852 <_strtoul_l.constprop.0+0xc6>
 8005844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005848:	b106      	cbz	r6, 800584c <_strtoul_l.constprop.0+0xc0>
 800584a:	4240      	negs	r0, r0
 800584c:	2a00      	cmp	r2, #0
 800584e:	d0f9      	beq.n	8005844 <_strtoul_l.constprop.0+0xb8>
 8005850:	b107      	cbz	r7, 8005854 <_strtoul_l.constprop.0+0xc8>
 8005852:	1e69      	subs	r1, r5, #1
 8005854:	6011      	str	r1, [r2, #0]
 8005856:	e7f5      	b.n	8005844 <_strtoul_l.constprop.0+0xb8>
 8005858:	2430      	movs	r4, #48	; 0x30
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1b5      	bne.n	80057ca <_strtoul_l.constprop.0+0x3e>
 800585e:	2308      	movs	r3, #8
 8005860:	e7b3      	b.n	80057ca <_strtoul_l.constprop.0+0x3e>
 8005862:	2c30      	cmp	r4, #48	; 0x30
 8005864:	d0a9      	beq.n	80057ba <_strtoul_l.constprop.0+0x2e>
 8005866:	230a      	movs	r3, #10
 8005868:	e7af      	b.n	80057ca <_strtoul_l.constprop.0+0x3e>
 800586a:	bf00      	nop
 800586c:	08005ad5 	.word	0x08005ad5

08005870 <_strtoul_r>:
 8005870:	f7ff bf8c 	b.w	800578c <_strtoul_l.constprop.0>

08005874 <__submore>:
 8005874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005878:	460c      	mov	r4, r1
 800587a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800587c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005880:	4299      	cmp	r1, r3
 8005882:	d11d      	bne.n	80058c0 <__submore+0x4c>
 8005884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005888:	f7fe feb4 	bl	80045f4 <_malloc_r>
 800588c:	b918      	cbnz	r0, 8005896 <__submore+0x22>
 800588e:	f04f 30ff 	mov.w	r0, #4294967295
 8005892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800589a:	63a3      	str	r3, [r4, #56]	; 0x38
 800589c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80058a0:	6360      	str	r0, [r4, #52]	; 0x34
 80058a2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80058a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80058aa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80058ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80058b2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80058b6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80058ba:	6020      	str	r0, [r4, #0]
 80058bc:	2000      	movs	r0, #0
 80058be:	e7e8      	b.n	8005892 <__submore+0x1e>
 80058c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80058c2:	0077      	lsls	r7, r6, #1
 80058c4:	463a      	mov	r2, r7
 80058c6:	f000 f83f 	bl	8005948 <_realloc_r>
 80058ca:	4605      	mov	r5, r0
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d0de      	beq.n	800588e <__submore+0x1a>
 80058d0:	eb00 0806 	add.w	r8, r0, r6
 80058d4:	4601      	mov	r1, r0
 80058d6:	4632      	mov	r2, r6
 80058d8:	4640      	mov	r0, r8
 80058da:	f000 f827 	bl	800592c <memcpy>
 80058de:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80058e2:	f8c4 8000 	str.w	r8, [r4]
 80058e6:	e7e9      	b.n	80058bc <__submore+0x48>

080058e8 <_fstat_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4d07      	ldr	r5, [pc, #28]	; (8005908 <_fstat_r+0x20>)
 80058ec:	2300      	movs	r3, #0
 80058ee:	4604      	mov	r4, r0
 80058f0:	4608      	mov	r0, r1
 80058f2:	4611      	mov	r1, r2
 80058f4:	602b      	str	r3, [r5, #0]
 80058f6:	f7fb fcdc 	bl	80012b2 <_fstat>
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	d102      	bne.n	8005904 <_fstat_r+0x1c>
 80058fe:	682b      	ldr	r3, [r5, #0]
 8005900:	b103      	cbz	r3, 8005904 <_fstat_r+0x1c>
 8005902:	6023      	str	r3, [r4, #0]
 8005904:	bd38      	pop	{r3, r4, r5, pc}
 8005906:	bf00      	nop
 8005908:	20000384 	.word	0x20000384

0800590c <_isatty_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d06      	ldr	r5, [pc, #24]	; (8005928 <_isatty_r+0x1c>)
 8005910:	2300      	movs	r3, #0
 8005912:	4604      	mov	r4, r0
 8005914:	4608      	mov	r0, r1
 8005916:	602b      	str	r3, [r5, #0]
 8005918:	f7fb fcdb 	bl	80012d2 <_isatty>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d102      	bne.n	8005926 <_isatty_r+0x1a>
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	b103      	cbz	r3, 8005926 <_isatty_r+0x1a>
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	20000384 	.word	0x20000384

0800592c <memcpy>:
 800592c:	440a      	add	r2, r1
 800592e:	4291      	cmp	r1, r2
 8005930:	f100 33ff 	add.w	r3, r0, #4294967295
 8005934:	d100      	bne.n	8005938 <memcpy+0xc>
 8005936:	4770      	bx	lr
 8005938:	b510      	push	{r4, lr}
 800593a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800593e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005942:	4291      	cmp	r1, r2
 8005944:	d1f9      	bne.n	800593a <memcpy+0xe>
 8005946:	bd10      	pop	{r4, pc}

08005948 <_realloc_r>:
 8005948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800594c:	4680      	mov	r8, r0
 800594e:	4614      	mov	r4, r2
 8005950:	460e      	mov	r6, r1
 8005952:	b921      	cbnz	r1, 800595e <_realloc_r+0x16>
 8005954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005958:	4611      	mov	r1, r2
 800595a:	f7fe be4b 	b.w	80045f4 <_malloc_r>
 800595e:	b92a      	cbnz	r2, 800596c <_realloc_r+0x24>
 8005960:	f7fe fddc 	bl	800451c <_free_r>
 8005964:	4625      	mov	r5, r4
 8005966:	4628      	mov	r0, r5
 8005968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800596c:	f000 f81b 	bl	80059a6 <_malloc_usable_size_r>
 8005970:	4284      	cmp	r4, r0
 8005972:	4607      	mov	r7, r0
 8005974:	d802      	bhi.n	800597c <_realloc_r+0x34>
 8005976:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800597a:	d812      	bhi.n	80059a2 <_realloc_r+0x5a>
 800597c:	4621      	mov	r1, r4
 800597e:	4640      	mov	r0, r8
 8005980:	f7fe fe38 	bl	80045f4 <_malloc_r>
 8005984:	4605      	mov	r5, r0
 8005986:	2800      	cmp	r0, #0
 8005988:	d0ed      	beq.n	8005966 <_realloc_r+0x1e>
 800598a:	42bc      	cmp	r4, r7
 800598c:	4622      	mov	r2, r4
 800598e:	4631      	mov	r1, r6
 8005990:	bf28      	it	cs
 8005992:	463a      	movcs	r2, r7
 8005994:	f7ff ffca 	bl	800592c <memcpy>
 8005998:	4631      	mov	r1, r6
 800599a:	4640      	mov	r0, r8
 800599c:	f7fe fdbe 	bl	800451c <_free_r>
 80059a0:	e7e1      	b.n	8005966 <_realloc_r+0x1e>
 80059a2:	4635      	mov	r5, r6
 80059a4:	e7df      	b.n	8005966 <_realloc_r+0x1e>

080059a6 <_malloc_usable_size_r>:
 80059a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059aa:	1f18      	subs	r0, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bfbc      	itt	lt
 80059b0:	580b      	ldrlt	r3, [r1, r0]
 80059b2:	18c0      	addlt	r0, r0, r3
 80059b4:	4770      	bx	lr
	...

080059b8 <_init>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr

080059c4 <_fini>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr
